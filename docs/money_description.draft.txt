Network Working Group                                       J.J. Brucker
Request for Comments:                                      Open-UDC Team 


          ==== Open-UDC Money Description ====

 === Abstract ===

 === Status of This Memo ===

 (Today 01 feb 2011, it is still a draft).

 === Copyright Notice ===

 === Table of Contents ===

 1. Introduction ....................................................
 2. Conventions Used in This Document ...............................
 3. udc-unit header .................................................
    3.1 currency code ...............................................
    3.2 version .....................................................
    3.3 serial number ...............................................
    3.4 additional info .............................................
    3.5 creation signature ..........................................
 4. udc-unit signing chain ..........................................
    4.1 overview ....................................................
    4.2 offline transactions ........................................
    4.3 beginning the chain .........................................
    4.4 shortcutting the chain ......................................
    4.5 timestamp in the chain ......................................
    4.6 gluing multiple header with one signing chain ............... 
    4.7 Signature types ............................................. 
        4.7.1 Digests ............................................... 
        4.7.2 Assymetric encryptions ................................ 
    4.8 Canceling a payment .........................................
 5. udc-unit binary format ..........................................
 6. udc-unit JSON format ............................................
 7. Security concerns ...............................................
    7.1 offline transactions ........................................
    7.2 creation signature ..........................................
    7.3 init chain signature ........................................

1.== Introduction ==

  The Open-UDC project aims to provide a open, democratic and secure
  monetary system, compatible with universal dividende.

  This document describe the set of informations which can be exchanged
  for goods and services.

  We define as "udc-unit" this set of informations.

  We define as "udc-client" any application wich manipulate udc-units
  according exactly to this specification ([RFCxxxx]).

2.== Conventions Used in This Document ==

  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in [RFC2119].

3.== udc-unit header ==

3.1= currency code =

    The currency code should be conformant to the ISO 4217 Currency Code
    List.

    There are still a lot of place in this list to create new
    3-characters currency codes.

3.2= version =

    Adding a version information inside udc-units give them the ability
    to evolve in the futur.

    This RFC describe only the version 1 of udc-units.

3.3= serial number =

    The serial number of a udc-unit is composed of 3 informations :

    - Its value, which SHOULD follow the convention mainly adopted
      worldwide: 1,2,5,10,20,50,100,200,500,1000 ...

    - Its creation date, which MUST be identical for a block of
      udc-units. As it is more convenient to use a date formated as
      number of seconds since 00:00:00 UTC on Thursday, 1 January 1970,
      a monthly creation date SHOULD be at 23:00:00 UTC on first day of
      each month.

    - Its number in the series (of the month).

    These 3 data are used to create unique information to identify one
    udc-unit of a given currency.

3.4= additional info =

    Open-UDC promote a monthly Universal Dividende. That means news
    udc-units are created each months, for each living humans (also
    called individuals) which adopt the money.

    Additionnal info permit to know more about the udc-unit : it spreads
    informations about monetary creation and so permit to detect the
    legitimacy of each udc-units.

    The additional information in a udc-units MUST be :
    1- The Universal Dividende for the month.
    2- The number of individuals recorded for the month.
    3- The number of units of the same value per individual.

    Example:
    If for a given month, there is 250 individuals and the Universal
    Dividende has been calculated to be 10052. The udc-units created
    MUST look like :
            250 x 2 udc-units of value 5000
            250 x 5 udc-units of value   10
            250 x 2 udc-units of value    1
    And so udc-units of value 10 will be numbered 0 to 1249 this month.

3.5= signature =

  The creation signature permit 
    - to detect error in the udc-unit (CRC use).
    - to authenticate the udc-unit.

4.== udc-unit signing chain ==

4.1= overview =

    Like in the BitCoin system: an udc-unit contain a chain of digital
    signatures. Each owner transfers the udc-unit to the next by
    digitally signing a digest of the previous transaction and the
    public key of the next owner and adding these to the end of the
    udc-unit. A payee can verify the signatures to verify the chain of
    ownership.

    And as the bitcoin designer said: the problem of course is the payee
    can't verify that one of the owners did not double-spend the udc-unit.

    And that the point where we diverge from bitcoin.

    Bitcoins want to avoid any third party to checks for transactions,
    and the solution they found to avoid third party involve more bad
    things that it prevents: the race for CPUs, fee for the benefit of
    the most powerful, freeze of transactions as the number of pairs
    increase...

    We (Open-udc) believe that third party MAY exist but HAVE TO be 
    democratic and transparent.

    So we split this third party into a tree of certified nodes, each
    node being composed of differents entities.
    Nodes are free to be democratic or not. But we give to the node the
    tools for democracy, and we believe that the succes of a node will
    depend on its transparency and its democracy level.

    Node architecture and mecanisms are described in the RFC named
    "Open-UDC Network Implementation" ([RFCxxxx]).

    First implementation of Open-UDC system MAY start with a third-party
    limited to only one server. Which means only one entity and is a
    GREAT DANGER for transparency and democracy.

4.2= offline transactions =

    The double-spending problem is solved by declaring each transaction
    to the node tree (the third-party autority). That is what we
    call the connected mode.

    But connected mode is not always possible in the real world:
    How to buy a camel in desert without internet connection ?
    
    By verifying the identity of the vendor, and also signing the URI
    of the node it belongs.

    Indeed, the vendor MUST show a node certificate wich contain its
    udc-units public key and which is signed by its node accountants.
    Its node accountants are themselves signed by the accountants of the
    parents nodes... until the main node where accountants
    are auto-signed and which the certificate is widely published and
    know-by-everyone.

    Offline udc-units MUST be connected regularly to:
    - possibly be shortened. 
    - be replayed and pay taxes if there are somes in the crossed nodes.
    - check it have not been double-spended and identify the bad guy if
      have been. 

    The offline parameters (maximum time since a connected transaction,
    maximum following offline transactions) MUST be the same for all
    udc-units of a given currency, and MAY be democratically
    calculated.

    If the offline parameters requirements are not meet, the transaction
    is invalid. That means people CAN'T spend offline udc-units which
    reach offline parameters.

    We recommend the number of 42 as the maximum following offline
    transactions.

4.3= beginning the chain =

4.4= shortcutting the chain =

4.5= timestamp in the chain =

4.6= gluing multiple header with one signing chain =

4.7= Signature types =

4.7.1 Digests

    This RFC define the 3 following types of digest :

        1 -> sha-1 digest.
        2 -> sha-256 digest.

    An udc-client MUST support this 3 digests.

4.7.2 Assymetric encryptions

    This RFC define the following types of assymetrics keys :
    
       2 -> RSA 1024 encryption key.
       3 -> RSA 1536 encryption key.
       4 -> RSA 2048 encryption key.
       6 -> RSA 3072 encryption key.
       8 -> RSA 4096 encryption key.

      11 -> NIST P-256
      12 -> NIST P-384
      13 -> NIST P-521

    An udc-client MUST support verificating a signature done with all
    of this key.

    An udc-client MUST support signing with any RSA key and SHOULD
    support signing with a key based on elliptic curve.

4.8= Canceling a transaction =

    A transaction can not be canceled.

    A transaction is valid or is not.

    If the transaction datas in the signature chain are incorrect, the
    transacation is invalid and :
    - the udc-unit MUST be rejected.
    - the udc-client that make an error MUST be notified that its
      transaction have been rejected.
    - the udc-unit still belongs to the owner of the last valid
      transaction.

    If the transaction is valid but, as a recipient, you don't want the
    money (to own the udc-unit(s)), you have to make an new transaction
    back, i.e. to sign the key before your in the udc-unit.


5.== udc-unit binary format ==
 
  Following present the binary construction of a udc-unit which version
  is equal to 1.

  This is also the recommended binary format to use through the network
  or in storage systems (files, databases, ...).

  All integer values stored on more that 1 byte MUST use the little
  endianness.     

  All data with variable size, MUST be 0-padded to a multiple of 64 bits
  (16 bytes). This concerns:
    - Node URI
    - Public key to sign
    - Signature

  All date are formated as number of seconds since 00:00:00 UTC on
  Thursday, 1 January 1970. That means the limit date is at year 2106.

  However be aware that on almost all 32 bits POSIX system, the time is
  signed and so is limited to 19 January 2038 if it is stored upon only
  one 32-bit integer.

5.1= header =

   0     7 8    15 16   23 24    31 32                            63 
  +-------+-------+-------+--------+--------+-------+-------+-------+
  |(3-char) currency code | Version|             Value              |
  +-------+-------+-------+--------+--------+-------+-------+-------+
  |         Creation Date          |     Periodic Counter
  +-------+-------+-------+--------+--------+-------+-------+-------+
                  | Mult. |           Individual Number             |
  +-------+-------+-------+--------+--------+-------+-------+-------+
  |      Universal Dividende       | NbGlued  |KType|  Init Key Id  |
  +-------+-------+-------+--------+--------+-------+-------+-------+
  +                                                                 +
  +                                                                 +
  +                                                                 +
  +             Cryptographic Creation Signature                    +
  +                   ( No digest needed )                          +
  +               (RSA 1024 encryption => 128 bytes)                +
  +                                                                 +
  +                                                                 +
  +-------+-------+-------+--------+--------+-------+-------+-------+

  Only the first 18 bytes (144 bits) are usefull to identify a unique
  udc-unit.

  Only the first 28 bytes (224 bits) are used to calculate the Creation
  Signature.

  To verify the signature you can use the openssl tool :
  Passing the 128 bytes Creation Signature into the command:
  " openssl rsautl -verify -pubin -inkey CreatorKey_date.pub "
  MUST return the first 224 bits.

  The 32 bits starting at bit 224 to bit 255 are used to init the
  signing chain.

5.2= signing chain =

  0     7 8      15 16     23 24     31 32                          63 
 +-------+---------+---------+---------+-------+-------+-------+------+
 |Ktype|D|    NbReset      |C| URI len |      Transaction Date        |
 +-------+---------+---------+---------+-------+-------+-------+------+
 |     In case of disconnected transaction : recipient Node URI       |
 +-------+---------+---------+---------+-------+-------+-------+------+
 +                                                                    +
 +            Public Key of the recipient of the udc-unit             +
 .              (lenght depend of the Signature type)                 .
 +                                                                    +
 +-------+---------+---------+---------+-------+-------+-------+------+
 +                                                                    +
 +             Cryptographic Transaction Signature                    +
 .    To be verified with the previous public key in the chain        .
 .   The public key of the first item of the chain is well know       .
 .   and is referenced with the unit key ID in the header part        .
 +                                                                    +
 +-------+---------+---------+---------+-------+-------+-------+------+

    Ktype: Type of public key the recipient will use.

    D: Digest used to Sign

    NbReset count the time the signing chain has been shortcuted at
    this point.
    As Shortcutting CAN NOT be done offline, this value MUST be equal
    to 0 if the Connection flag (C) is not set.

    C: Transaction Flag:
       - bit 8: Connection flag:
            - 1 the transaction has been sent and validated by the
                 udc-node.
            - 0 the transacation has been done in a disconnected status.
                In this case the recipient of the transaction have to be
                authenticated (as a member of a udc-node in the open-udc
                certification tree).


6.== udc-unit JSON format ==


7.== Security concerns ==

7.1= offline transactions =

    As it has been mentioned, offline udc-units MUST be connected
    regularly.

    If not, fraud detection will become harder, which mean fraud will
    become easier.

7.2= creation signature =

    Due to:
    - The node certification tree which maintain the monetary mass
      and garant the uniqueness of the localization of a udc-unit.
    - The additional informations in udc-units which MUST be
      identicals on many of them.
    The authentication provided by the creation signature is ultimately
    not so important.

    If the private creation key is found, the consequences are minors, 
    because to use a non-legitimate udc-unit :
    - Transaction have to be done offline.
    - One of the valid (not revoked) init key must also have been found.
    - It should pass through legitimacy verification that any
      udc-clients may easily implement (due to additional informations).
    - As transactions are nearly journalized in udc-units, there are
      chances to trace back to the ugly one.

    However, it MUST still take the following precautions:

    - The creation of udc-unit MUST be done by an entity strictly 
      separated from the init entities.

    - The creation private key MUST be stay encrypted on at most two
      machines isolated from any network.

    - The creation key SHOULD change regularly, and its public key
      SHOULD be announced at least two weeks before it's use.


7.3= init chain signature =

