Network Working Group                                       J.J. Brucker
Request for Comments:                                      Open-UDC Team 


          ==== Open-UDC Money Description ====

 === Abstract ===

 === Status of This Memo ===

 (Today 01 feb 2011, it is still a draft).

 === Copyright Notice ===

 === Table of Contents ===

 1. Introduction ....................................................
 2. Conventions Used in This Document ...............................
 3. udc-unit header .................................................
    3.1 currency code ...............................................
    3.2 version .....................................................
    3.3 serial number ...............................................
    3.4 additional info .............................................
    3.5 creation signature ..........................................
 4. udc-unit signing chain ..........................................
    4.1 overview ....................................................
    4.2 beginning the chain .........................................
    4.3 offline transactions ........................................
    4.4 shortcutting the chain ......................................
    4.5 timestamp in the chain ......................................
    4.6 gluing multiple header with one signing chain ............... 
    4.7 Signature types ............................................. 
    4.8 Canceling a payment .........................................
 5. udc-unit binary format ..........................................
 6. udc-unit JSON format ............................................
 7. Security concern ................................................
    7.1 offline transactions ........................................
    7.2 creation signature ..........................................
    7.3 init chain signature ........................................

1.== Introduction ==

  The Open-UDC project aims to provide a open, democratic and secure
  monetary system, compatible with universal dividende.

  This document describe the set of informations which can be exchanged
  for goods and services.

  We define as "udc-unit" this set of informations.

2.== Conventions Used in This Document ==

  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in [RFC2119].

3.== udc-unit header ==

3.1= currency code =

    The currency code should be conformant to the ISO 4217 Currency Code
    List.

    There are still a lot of place in this list to create new
    3-characters currency codes.

3.2= version =

    Adding a version information inside udc-units give them the ability
    to evolve in the futur.

    This RFC describe only the version 1 of udc-units.

3.3= serial number =

   (... The value and the creation date should considered of a part of 
    the Serial Number. Which means the 64 bits field periodic counter should
    be reseted monthly ...)

3.4= additional info =

    Open-UDC promote a monthly Universal Dividende. That means news
    udc-units are created each months, for each living humans (also
    called individuals) which adopt the money.

    Additionnal info permit to know more about the udc-unit : it spreads
    informations about monetary creation and so permit to detect the
    legitimacy of each udc-units.

    The additional information in a udc-units MUST be :
    1- The Universal Dividende for the month.
    2- The number of individuals recorded for the month.
    3- The number of units of the same value per individual.

    Example:
    If for a given month, there is 250 individuals and the Universal
    Dividende has been calculated to be 10052. The udc-units created
    MUST look like :
            250 x 2 udc-units of value 5000
            250 x 5 udc-units of value   10
            250 x 2 udc-units of value    1
    And so udc-units of value 10 will be numbered 0 to 1249 this month.

3.5= signature =

  The creation signature permit 
    - to detect error in the udc-unit (CRC use).
    - to authenticate the udc-unit.

  

  Due to:
    - The node certification tree which maintain the monetary mass
      and garant the uniqueness of the localization of a udc-unit.
    - The additional informations in udc-units which MUST be
      identicals on many of them.

  The authentication provided by the creation signature is ultimately
  not so important.

  If the private creation key is found, the consequences are minors, 
  because to use a non-legitimate udc-unit :
    - Transaction have to be done offline.
    - One of the valid (not revoked) init key must also have been found.
    - It should pass through legitimacy verification that any
      udc-clients may easily implement (due to additional informations).
    - As transactions are nearly journalized in udc-units, there are
      chances to trace back to the ugly one.

  However, it MUST still take the following precautions:
    - The creation of udc-unit MUST be done by an entity strictly separated
      from the init entities.
    - The creation private key MUST be stay encrypted on a machine isolated
      from any network. 

4.== udc-unit signing chain ==

4.1= overview =
4.2= beginning the chain =
4.3= offline transactions =
4.3= shortcutting the chain =
4.4= timestamp in the chain =
4.5= gluing multiple header with one signing chain =

4.6= Signature types =


    This RFC define the 3 following types of digest :
        0 -> md5 digest
        1 -> sha-1 digest.
        2 -> sha-256 digest.

    This RFC define the following types of assymetrics keys :
        1 -> RSA 512 encryption key.
        2 -> RSA 1024 encryption key.
        3 -> RSA 1536 encryption key.
        4 -> RSA 2048 encryption key.

AND I HAVE HERE SOME QUESTIONS :

        WHICH ELLIPTIC CURVE TO USE ?
        WITH WICH PARAMETERS ?
        HOW ?    
        ...

4.7= Canceling a payment =

5.== udc-unit binary format ==

  Following present the binary construction of a udc-unit which version
  is equal to 1.

  This is also the recommended binary format to use through the network
  or in storage systems (files, databases, ...).

  All integer values stored on more that 1 byte MUST use the little
  endianness.     

5.1= header =

   0     7 8    15 16   23 24    31 32                            63 
  +-------+-------+-------+--------+--------+-------+-------+-------+
  |(3-char) currency code | Version|             Value              |
  +-------+-------+-------+--------+--------+-------+-------+-------+
  |         Creation Date          |     Periodic Counter
  +-------+-------+-------+--------+--------+-------+-------+-------+
                  | Mult. |           Individual Number             |
  +-------+-------+-------+--------+--------+-------+-------+-------+
  |      Universal Dividende       |NbGlued   |KType|  Init Key Id  |
  +-------+-------+-------+--------+--------+-------+-------+-------+
  +                                                                 +
  +                                                                 +
  +                                                                 +
  +             Cryptographic Creation Signature                    +
  +                   ( No digest needed )                          +
  +               (RSA 1024 encryption => 128 bytes)                +
  +                                                                 +
  +                                                                 +
  +-------+-------+-------+--------+--------+-------+-------+-------+

  Only the first 18 bytes (144 bits) are usefull to identify a unique
  udc-unit.

  Only the first 28 bytes (224 bits) are used to calculate the Creation
  Signature.

  To verify the signature you can use the openssl tool :
  Passing the 128 bytes Creation Signature into the command:
  " openssl rsautl -verify -pubin -inkey CreatorKey_date.pub "
  MUST return the first 224 bits.

  The 32 bits starting at bit 224 to bit 255 are used to init the
  signing chain.


5.2= signing chain =

  0     7 8      15 16     23 24     31 32                          63 
 +-------+---------+---------+---------+-------+-------+-------+------+
 |Ktype|D|C|  RFU  | Ext len | NbReset |      Transaction Date        |
 +-------+---------+---------+---------+-------+-------+-------+------+
 |     In case of disconnected transaction : recipient Node URI       |
 +-------+---------+---------+---------+-------+-------+-------+------+
 +                                                                    +
 +            Public Key of the recipient of the udc-unit             +
 .              (lenght depend of the Signature type)                 .
 +                                                                    +
 +-------+---------+---------+---------+-------+-------+-------+------+
 +                                                                    +
 +             Cryptographic Transaction Signature                    +
 .    To be verified with the previous public key in the chain        .
 .   The public key of the first item of the chain is well know       .
 .   and is referenced with the unit key ID in the header part        .
 +                                                                    +
 +-------+---------+---------+---------+-------+-------+-------+------+

    Ktype: Type of public key the recipient will use.

    D: Digest used to Sign

    C: Transaction Flag:
       - bit 8: Connection flag:
            - 1 the transaction has been sent and validated by the
                 udc-node.
            - 0 the transacation has been done in a disconnected status.
                In this case the recipient of the transaction have to be
                authenticated (as a member of a udc-node in the open-udc
                certification tree).

        

6.== udc-unit binary format ==


7.== udc-unit binary format ==
