Network Working Group                                       J.J. Brucker
Request for Comments:                                      Open-UDC Team


      ==== OpenUDC Exchange Formats  ====

 === Abstract ===

 === Status of This Memo ===

 (Today 1st december 2011, it is still a draft).

 === Copyright Notice ===

 === Table of Contents ===

 1. Introduction ....................................................
 2. Conventions Used in This Document ...............................
 3. Validation Nodes act as HTTP Servers ..........................
 4. Tree Structure of Validation Nodes ............................
 5. Data expected in the tree structure .............................
    5.1 Formats used for creation sheets
    5.2 Formats used for transactions
    5.3 Formats used for authentication
    5.4 Formats encapsulation.

1.== Introduction ==

  The OpenUDC project aims to provide a open, democratic and secure
  monetary system, compatible with universal dividend.

  This document describe the MIME-types used in to described the
  different datas which need are exchanged in OpenUDC implementations.

  Only the Content-Type field is used, which permit more flexible uses:
  It make it compatible with almost all multipart media type as defined
  in section 5.1 of [RFC2046].
  But

  OpenPGP standard [RFC4880].

2.== Conventions Used in This Document ==

  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in [RFC2119].

3.== Validation Nodes Overview ==

  Validation Nodes, act as HTTP Servers.

  There in no restriction on the port number to reach a Validation
  Deamon, although port 11371 or 80 are recommanded.

  Validation Nodes MUST manage "GET" and "POST" word as specified by
  the protocol HTTP/1.0.

  Validation Nodes SHOULD manage "HEAD" word and "Range" parameter, as
  specified by the protocol HTTP/1.1, cf. [rfc2616].

  Validation Nodes MUST manage the MIME types defined in this document
  (cf sections ..) and send them them in the "Content-Type" parameter.

4.== Tree Structure of Validation Nodes

  As each Nodes act as an HTTP server, Node Ressources MUST be
  available trough such kind of URL :

    * http://NodeHostame[:port]/[Root/]...
  or
    * https://NodeIP[:port]/[Root/]...
  or
	* httpgp://NodeIP[:port]/[Root/]...

  After a eventual Root depending on the node's configuration, in its
  URL ; a node MUST provide determined ressources at determined
  location.

  Here is an OverView of such tree structure :

http[s]://Node[:port]/[Root/]...
|-- udc/
|   |-- validate
|   |-- database/
|   |   `-- [CREATION_SHEET_NUM]/
|   |       |-- 1.bdb
|   |       |-- ...
|   |       |-- 1024.bdb
|   |       `-- ...
|   `-- transactions/
|       |-- 20D11AC53DAE0E19DFEEE14657A135297E9DF1BF/
|       |-- 1B0C7D91A7A1A833C32D4E156AEEFE2C96193F28/
|       |   |-- 1.gpg
|       |   |-- ...
|       |   `-- 3.gpg
|       `-- 5FDA8373344F3868D24D8ED280B1DF4F7FE6695D/
|           `-- 1.gpg
|-- udid2/
|   |-- geolist_FRA.txt.asc
|   |-- geolist_ITA.txt.asc
|   |(...)
|   `-- index.html
|-- pks/
|   |-- add
|   `-- lookup
|-- peers/
|   |-- self
|   |-- register
|   `-- list
`-- p_k/
    |-- update
    |-- lookup
    `-- [CREATION_SHEET_NUM]/
        |-- [CREATION_SHEET_NUM].sheet
        |-- [CREATION_SHEET_NUM].params
        `-- [CREATION_SHEET_NUM].keys

5.== Data expected in the tree structure ==

5.1= Formats used for creation sheets =
5.3= Formats used for authentication =
5.4= Formats encapsulation =

This document describe the MIME-types used in to described the
  different datas which need are exchanged in OpenUDC implementations.
cf: [RFC2046] : http://www.bortzmeyer.org/2046.html
[RFC3156] : http://www.ietf.org/rfc/rfc3156.txt
MIME types used by OpenUDC Nodes and Clients

    text/udc-report

contain status code of the transaction, and a status string.

5.2= Formats used for transactions =

    application/udc-t-cheque ("cheque")

_VERSION_FORMAT_
si _VERSION_FORMAT_ == "d=tt2"
_CURRENCY_NAME_
_FINGERPRINT_SOURCE_
_FINGERPRINT_DESTINATION_
_BINARY_VALUE (POWER ?)_-_CREATION_SHEET_ID_-_JOB_ID_+_EXCHANGE_COUNTER_ _FINGERPRINT_PREVIOUS_OWNER_ _BINARY_VALUE (POWER ?)_-_CREATION_SHEET_ID_-_JOB_ID_ _EXCHANGE_COUNTER_ 
...
Example:
d=tt2
test2
20D11AC53DAE0E19DFEEE1465D2662E0F300EBAD
5FDA8373344F3868D24D8ED280B1DF4F7FE6695D
4-3-1 1
32-2-8 2 D8ED280B1DF4F7FE669520D11AC53DAE0E19DFE  4-1-2 3
64-2-0 1

    application/pgp-signature ("receipt of the cheque")

contain detached signature (ASCII-armored or not) of the application/udc-t-cheque content by the receipt.

    application/udc-t-validation

contain detached signature (ASCII-armored or not), signed by a validation node of :

    the application/udc-t-cheque content

    and the status code of the transaction.

    application/udc-c-env

[VERSION_FORMAT]
[CURCODE]
[SETNUM]
[ATTEMPT]
[FACTORS]
[VOTE_EXPIRATION_DATE DATE(YYYY-MM-DD)]
[URI_VPOOLS]
[NUMBER_OF_INDIVIDUALS]
Example:
d=cset3.env
unt
1
1
2 1 3 0 1 3 0 1 3 2 0 1
2011-12-25
irc://irc.lfnet.org:6667/ irc://irc.oftc.net:6667/
7

    application/udc-c-list

Example:
d=idlist # -----
FD289C703E2E54C8BBED7CD08BAA38841BA5F17B:-:udid2;c;LEPRETTE;NATHANAEL;1987-06-20;e+43.30+005.38;0::
05AA4007A3428EBE6BF3B751D403380F6656CBEC:-:udid2;c;GOINVIC;GAEL;1991-01-09;e+48.75+002.30;0:v:
6089A78D77BC6C7A1A2EC7F097E9443A0AA85FA4:-:udid2;h;f59e2df34cd5e198241b8bec8c4f9421097bd7b4;0::
20D11AC53DAE0E19DFEEE1465D2662E0F300EBAD:-:udid2;c;CANDAN;CANER;1986-09-11;e+47.75+007.34;0:v:
AB49FC7C3EC6D4A2259B0508FB29CDDA17A7E2AE:-:udid2;h;e29e9cd71ee03702c8a51b37380cc2b307133d53;0:v:
5FDA8373344F3868D24D8ED280B1DF4F7FE6695D:-:udid2;c;BRUCKER;JEAN-JACQUES;1980-05-12;e+48.83+002.33;0:i:
18F938BD3BBBF9190B77EABB57A135297E9DF1BF:-:udid2;c;LABORDE;STEPHANE;1969-04-26;e+44.84-000.58;0;::

    application/udc-c-ldiff

    application/pgp-signature ("vote of the creation sheet")

    application/pgp-keys

    application/udc-a-request

    application/udc-a-response

MIME types for other applications (like mail client) :

    application/udc-transaction

    application/udc-creation


https://grepular.com/FireGPG_on_Firefox_5


X.  HTTP (multi-)signed data

   HTTP (multi-)signed messages are denoted by the "multipart/msigned"
   content type, with an optional "nsigs" parameter.
   This content type is inspired by the "multipart/signed" defined in
   the [RFC3156] and dedicated for sending signed email.

   The multipart/msigned body MUST consist of at least two parts. One
   part contains the signed data in MIME canonical format, including a
   set of appropriate content headers describing the data.

   Other parts MUST contain each one a digital signature. For OpenPGP
   signatures, it MUST be labeled with a content type of
   "application/pgp-signature".

   If present, the "nsigs" parameter MUST contain a signed integer.
   The "nsigs" parameter indicated the number of detached
   signatures, as well as there position inside the "multipart/msigned"
   stream:
    - integer value indicate the number of signatures. The absolute
    value MUST be equal to the effective number of signatures in the
    stream.
    - a positive value indicate that the signatures will be placed
    after the data.
	- a negative value indicate that the signatures will be placed
    before the data. Thus permit to verify the data in one-pass as the
    digest (also know as MIC: Message Integrity Check) used to sign are
    indicated in each signature (or in their content header for others
    signature than OpenPGP).
    - The absence of the "nsigs" parameter MUST be treated as it have
    had a value of "1".

     Notes:
    - The "nsigs" parameter should not have a value of "0".
    Reading implementations may return an error in this case.
    - OpenPGP signatures SHOULD be ASCII armored.
     

    Example of an HTTP request with signed response:

      > GET /in/example HTTP/1.1
      > Accept: multipart/msigned 
      >

      < HTTP/1.0 200 OK
      < Content-Type: multipart/msigned; boundary=HRuNvorp; nsigs=1
      <  
      < --HRuNvorp
      < Content-Type: application/octet-stream
      <
     &<
     &< The use "<CR><LF>" (on some system...) instead of just
     &< "<LF>" was really a bad idea.
     &<
     &< It is then incrusted inside the HTTP protocol :-(.
     &<
     &< Take care than the signed message so: 
     &<  - starts after the "<CR><LF><CR><LF>" characters which
     &<  should terminating the header.
     &<  - ends before the "<CR><LF>" characters preceding the
     &<  dash-boundary (eg: "--boudary").
     &<
     &< And so does the signature.
     &<
     &< As such tricks may easily produce implementation errors,
     &< it is recommend to use ASCII armored signatures, which
     &< are more ... armored ! ;-)
     &<
      <
      < --HRuNvorp
      < Content-Type: application/pgp-signature
      < Content-Length: 490
      <
      < -----BEGIN PGP SIGNATURE-----
      < Version: GnuPG v1.4.12 (GNU/Linux)
      <
      < iQEcBAABCAAGBQJQWaIQAAoJEEIpCDWL9j3OmsYH/0rA0PEDRYwiBiKZD7o/tR9n
      < g7/Nubwd++Oea0RKyRrmUi6FEjpdYn2cqbGlKKtvLc3rd4Fz9nz7B16SYuU8dubv
      < QVLju/Czf+1VRhhB86sCvWbjQO6Z2SUGBcPUqtEkDZWdkxoeTdLq7aMxj0YbP2zR
      < fJoeFgC+4vywOp90NKXcDi22cS7y4zSyrrYkZEyDAmcrIbRzHPqpqpCmFBkTSMI2
      < D2BBC/jDS1ZpzCISjJ0Q4dYMo5HB2d0xiTTcF9BB0sYwnC5RElOOXTPY0y3gwcc/
      < NWNFJBkGXHI23fKjGth2sBmSvTsz5aPIkonwkSk/QRk6j5hXLTG+1VkTEikpfZk=
      < =paY0
      < -----END PGP SIGNATURE-----
      <
      < --HRuNvorp--

   The "&"s in the previous example indicate the portion of the data
   over which the signature was calculated.

References

   [1]   Callas, J., Donnerhacke, L., Finney, H. and R. Thayer, "OpenPGP
         Message Format", RFC 2440, November 1998.

   [2]   Galvin, J., Murphy, G., Crocker, S. and N. Freed, "Security
         Multiparts for MIME: Multipart/Signed and Multipart/Encrypted",
         RFC 1847, October 1995.

   [3]   Freed, N. and N. Borenstein, "Multipurpose Internet Mail
         Extensions (MIME) Part Two: Media Types", RFC 2046, November
         1996.

   [4]   Galvin, J., Murphy, G., Crocker, S. and N. Freed, "MIME Object
         Security Services", RFC 1848, October 1995.

   [5]   Atkins, D., Stallings, W. and P. Zimmermann, "PGP Message
         Exchange Formats", RFC 1991, August 1996.

   [6]   Elkins, M., "MIME Security with Pretty Good Privacy (PGP)", RFC
         2015, October 1996.

   [7]   Freed, N., "Gateways and MIME Security Multiparts", RFC 2480,
         January 1999.


