#!/usr/bin/env bash

if ! [[ "$udcVersion" ]] || ! . uset.env ; then
    echo "Error: Unitialized environnement" >&2
    [[ "${0##*/}" == "bash" ]] && return 255 || exit 255
fi

[[ "$Currency" ]] || UDinit || $udc_exit 255


function UDircbot {


    # irc.cat.pdx.edu 6667 : Why not ?
    # irc.oftc.net 6667    : Good
    # irc.lfnet.org 6667   : The same as bitcoin, solidcoin, namecoin ... ;-)

local line IrcLogpipe IrcNick free
local IrcUser="${myaccounts[0]}"
local IrcComment="${myudid2h:-$myudid2c}"
local IrcChan="#udc.$Currency"
local Ircfifo="$TmpDir/ircfifo"
local Irclogfile="irc_$Currency.log"
[[ "$1" ]] && IrcLogpipe="tee -a $Irclogfile" || IrcLogpipe="cat"
local IrcServ="${2:-irc.lfnet.org 6667}"

while true ; do 
    IrcNick="${IrcUser:32}"
    mkfifo "$Ircfifo" || return 249

    while read -t 510 src command target args ; do
        [[ "$IrcLogpipe" != "cat" ]] && echo "$(date -R)<- $src $command $target $args" >> "$Irclogfile"
        case "$src" in
            "PING") echo "PONG :hostname" | $IrcLogpipe >> "$Ircfifo" ;;
            "ERROR") break ;;
        esac
        src="${src:1}" # Remove 1st char ':' 
        case "$command" in
            NOTICE) echo >> "$Ircfifo" ;;
            43?) IrcNick="_$IrcNick" ; echo -e "NICK $IrcNick\nJOIN $IrcChan" | $IrcLogpipe >> "$Ircfifo" ;;
            PRIVMSG)
                case "$target" in
                    "$IrcChan")
                        SrcNick="${src%%\!*}"
                        echo "Message in main chan from $SrcNick: $(echo "${args:1}" | hexdump -C)" >&2
                        if [[ "${args:1}" =~ "-----BEGIN PGP MESSAGE-----" ]] ; then
                            echo "New Message detected" >&2
                            free=0
                            IrcDate="$(date +%s)"
                            for i in "${!SrcCurrent[@]}"; do
                                [[ "${SrcCurrent[$i]}" == "$src" ]] && break
                                ((i==free?free++)) # search first free slot
                                # Remove zombies
                                (( IrcDate > SrcTimeIn[$i] + 300 )) && eval echo Zombie: IrcMsg_"${SrcCurrent[$i]%%\!*}" SrcCurrent[\$i] SrcTimeIn[\$i] >&2
                                #(( IrcDate > SrcTimeIn[$i] + 300 )) && eval unset IrcMsg_"${SrcCurrent[$i]%%\!*}" SrcCurrent[\$i] SrcTimeIn[\$i]  
                            done
                            if [[ "${SrcCurrent[$i]}" != "$src" ]] ; then
                                echo "New Message - slot $i" >&2
                                i="$free"
                                SrcCurrent[$i]="$src"
                            fi
                            SrcTimeIn[$i]="$IrcDate"
                            eval IrcMsg_"$SrcNick"="${args:1}
"
                        fi

                        if [[ "${SrcCurrent[@]}" =~ "$src" ]] ; then

                            if eval [[ \${#IrcMsg_$SrcNick} -lt  4096 ]] ; then
                                eval IrcMsg_"$SrcNick"+="\${args:1}
"
                                if [[ "${args:1}" =~ "-----END PGP MESSAGE-----" ]] ; then 
                                    for i in "${!SrcCurrent[@]}" 32768 ; do 
                                        [[ "${SrcCurrent[$i]}" == "$src" ]] && break
                                    done
                                    echo "End Message - slot $i" >&2
                                    if SrcFprint[$i]="$(eval echo "\$IrcMsg_$SrcNick" | LANGUAGE=en $udc_gpg --verify --batch --no-verbose --with-fingerprint 2>&1 )" \
                                        && SrcFprint[$i]="$(echo "SrcFprint[$i]" | sed -n ' $s, ,,g ; $s,.*:\([0-9A-F]\{40\}\),\1,p ')" \
                                        && udc_isaccount "${SrcFprint[$i]}" ; then 
                                        mapfile SrcMessage < <(eval echo "\$IrcMsg_$SrcNick" | LANGUAGE=en $udc_gpg --decrypt --batch --no-verbose )
                                        if [[ "${SrcMessage[0]}" == "d=t2e" ]] \
                                            && [[ "${SrcMessage[1]}" == "$Currency" ]] \
                                            && ((SrcMessage[2]>0)) \
                                            && udc_isaccount "${SrcMessage[3]}" ; then
                                            # (...)
                                            echo "PRIVMSG $SrcNick :Success: I validate your transaction ${SrcMessage[2]}" | $IrcLogpipe >> "$Ircfifo"
                                        else
                                            echo "PRIVMSG $SrcNick :Error: Unreconized message : ${SrcMessage[0]} ${SrcMessage[1]} ${SrcMessage[2]} ..." | $IrcLogpipe >> "$Ircfifo"
                                        fi
                                    else
                                            echo "PRIVMSG $SrcNick :Error: Invalid PGP MESSAGE" | $IrcLogpipe >> "$Ircfifo"
                                    fi
                                    eval unset SrcCurrent[\$i] SrcTimeIn[\$i] IrcMsg_"$SrcNick"
                                fi
                            else
                                for i in "${!SrcCurrent[@]}" 32768 ; do 
                                    [[ "${SrcCurrent[$i]}" == "$src" ]] && break
                                done
                                echo "PRIVMSG $SrcNick :Error: PGP MESSAGE exceed limit (4096)" | $IrcLogpipe >> "$Ircfifo"
                                eval unset SrcCurrent[\$i] SrcTimeIn[\$i] IrcMsg_"$SrcNick"
                            fi
                        fi
                        ;;
                        "$IrcNick") ((RANDOM%2)) && echo "PRIVMSG $SrcNick :I don't like you :-p" | $IrcLogpipe >> "$Ircfifo" ;;
                esac
        esac
        #echo "$(fortune)" | gpg --sign --armour -u CBB00E8E! | while read line ; do echo "PRIVMSG $target :$line" ; done | $IrcLogpipe >> "$Ircfifo"
    done < <( ( echo -e "USER $IrcUser 0 _ :I iz a bot\nNICK $IrcNick\nJOIN $IrcChan" ; tail -f "$Ircfifo" ) | nc $IrcServ )
    rm -f "$Ircfifo" 
done
}
