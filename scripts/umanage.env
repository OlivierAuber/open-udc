#!/bin/bash



function udc_freadgrains {
# (fast) Print an array to tell how many grains are available for each value.
# Arguments 1... (Optionnal) : fingerprint of keys/account to read balance. By default : use keys in $mykeys.
# Output 64 numbers corresponding to the grains of value 1 2 4 8 16 ... 9223372036854775808
# Return true if all OK. 1 if a given key in the (global variable) $Currency is not found locally.
    local i=0 ret=0

    for keys in ${@:-${mykeys[@]}} ; do
        if ! [[ -d "$udcHOME/$Currency/k/$keys" ]] ; then 
            ret=1
            continue
        fi
        for ((i=0;i<64;i++)) ; do 
		echo -n "$(($(gawk 'END { print NR }' "$udcHOME/$Currency/k/$keys/[vw]/g/$((1<<i))" 2> /dev/null) ))"
	done
    done
    return $ret
}

function udc_freadbalance {
# (fast) Print sum (value) of grains usable in all given accounts according to local files
# Arguments 1... (Optionnal) : fingerprint of keys/account to read balance. By default : use keys in $mykeys.
# Output 3 lines :
#           - The amount which synchronization have not been done/validated with the network
#           - The amount which have been synchronized (validated) with the network
#           - The total 
# Return true if all OK. 1 if a given key in the (global variable) $Currency is not found locally.
    local wamount=0 vamount=0 ret=0

    for keys in ${@:-${mykeys[@]}} ; do
        if ! [[ -d "$udcHOME/$Currency/k/$keys" ]] ; then 
            ret=1
            continue
        fi
        while read file ; do 
	    ((wamount+=${file##*/}*$(gawk 'END { print NR }' $file) ))
    	done < <(ls "$udcHOME/$Currency/k/$keys/w/g/"[1-9]*)
        while read file ; do 
	    ((vamount+=${file##*/}*$(gawk 'END { print NR }' $file) ))
    	done < <(ls "$udcHOME/$Currency/k/$keys/v/g/"[1-9]*)
    done
    echo -e "$wamount\n$vamount\n$((wamount+vamount))"

    return $ret
}

function udc_preparetransaction {
# Prepare grains for a transaction
# Argument 1 : amount
# Arguments 2... (Optionnal) : fingerprint of keys/account to use. By default : use keys in $mykeys.
# Output the "best" list of grains to send.
## Return the sum of the best grains selection : it can be greater than the amount asked, if we miss smallest grains. Or lesser if the amount asked is greater than the balance.
# Return 0 if prepared grains match asked amount. 255 if the amount asked is greater than the balance. Max(254,sum-asked) if we miss smallest grains.

    
    return
}
