#!/bin/bash

function i { return ; } # Just because "<<" mess with syntax coloration ...

function udc_freadgrains {
# (fast) Print an array to tell how many (synchronized) grains are available for each value.
# Arguments 1 (Optionnal) : fingerprint of the key/account to read grains. By default : use 1st key in $myaccounts.
# Output up to 64 numbers corresponding to the grains of value 1 2 4 8 16 ... 922337203685477580
#   which have been synchronized (validated) with some publication servers
# Return true if all OK. 1 if the given key (in the global $Currency) is not found locally.
    local key=${1:-${myaccounts[0]}} i=63 j

    [[ -d "$udcHOME/$Currency/k/$key" ]] || return 1
#    while ! [[ -f "$udcHOME/$Currency/k/$key/g/"$((1<<i )) ]] ; do # Note "<<" mess with syntax coloration ...
i 
        ((i--))
    done
    for ((j=0;j<=i;j++)) ; do
        echo -n "$(($(gawk 'END { print NR }' "$udcHOME/$Currency/k/$key/g/"$((1<<j)) 2> /dev/null) ))"
    done
}

function udc_freadwgrains {
# (fast) Print an array to tell how many grains (waiting to be synchronized) are available for each value.
# Arguments 1 (Optionnal) : fingerprint of the key/account to read grains. By default : use 1st key in $myaccounts.
# Output up to 64 numbers corresponding to the grains of value 1 2 4 8 16 ... 922337203685477580
#   which synchronization have not been done/validated with some publication servers
# Return true if all OK. 1 if the given key (in the global $Currency) is not found locally.
    local key=${1:-${myaccounts[0]}} i=63 j

    [[ -d "$udcHOME/$Currency/k/$key" ]] || return 1
#    while ! [[ -f "$udcHOME/$Currency/k/$key/w/g/"$((1<< i )) ]] ; do # Note "<<" mess with syntax coloration ... 
i
        ((i--))
    done
    for ((j=0;j<=i;j++)) ; do
        echo -n "$(($(gawk 'END { print NR }' "$udcHOME/$Currency/k/$key/w/g/"$((1<<j)) 2> /dev/null) ))"
    done
}



function udc_freadbalance {
# (fast) Print sum (value) of grains usable in all given accounts according to local files
# Arguments 1... (Optionnal) : fingerprint of keys/accounts to read balance. By default : use keys in $myaccounts.
# Output 3 items :
#           - The amount which have been synchronized (validated) with some publication servers
#           - The amount which synchronization have not been done/validated with some publication servers
#           - The total 
# Return true if all OK. 1 if a given key in the (global variable) $Currency is not found locally.
local keys file vamount=0 ret=0

    for keys in ${@:-${myaccounts[@]}} ; do
        if ! [[ -d "$udcHOME/$Currency/k/$keys" ]] ; then 
            ret=1
            continue
        fi
        while read file ; do 
	    ((vamount+=${file##*/}*$(gawk 'END { print NR }' $file) ))
    	done < <(ls "$udcHOME/$Currency/k/$keys/g/"[1-9]*)
    done
    #echo -e "$vamount\n$wamount\n$((wamount+vamount))"
    echo -e "$((vamount))"

    return $ret
}

function udc_preparetransaction {
# Prepare grains for a transaction
# Argument 1 : amount
# Arguments 2 (Optionnal) : fingerprint of the key/account to use. By default : use 1st key in $myaccounts.
# Output the "best" list of grains to send.
## Return the sum of the best grains selection : it can be greater than the amount asked, if we miss smallest grains. Or lesser if the amount asked is greater than the balance.
# Return 0 if prepared grains match asked amount. 254 if the amount asked is greater than the balance. Max(253,sum-asked) if we miss smallest grains. 255 if an other error occurs.

    local amount=$(($1)) key="${2:-${myaccounts[0]}}" i total=0 ref=1 ret=0 g grains=() 

    local vwallet=($(udc_freadvgrains $key))
    for i in ${!vwallet[@]} ; do 
        ((total+=vwallet[i]*(1<<i)))
    done
    local wwallet=($(udc_freadwgrains $key))
    for i in ${!wwallet[@]} ; do 
        ((total+=wwallet[i]*(1<<i)))
    done

    ((total<amount)) && return 254

    mkdir -p "$TmpDir/$key/"{v,w}/g/
    for ((i=0;i++;ref<=amount)) ; do
#        ((ref<<=1)) # Note: "<<" mess with syntax coloration ...
        ((ref*=2))
    done
    while ((ref)) ; do

        cp "$udcHOME/$Currency/k/$key/v/g/$ref" "$TmpDir/$key/v/g/" || return 255
        cp "$udcHOME/$Currency/k/$key/w/g/$ref" "$TmpDir/$key/w/g/" || return 255
        if ((amount&ref)) ; then
            for ((j=0;j++;ref>>j)) ; do 
            if ((vwallet[i-j] + wwallet[i-j] >=1<<j)) ; then
                if ((vwallet[i-j]>=1<<j)) ; then
                    g+=($(sed -n 1,$((1<<j))p "$TmpDir/$key/v/g/$ref" )) || return 255
                    sed -i 1,$((1<<j))d "$TmpDir/$key/v/g/$ref" || return 255
                    ((vwallet[i-j]-=1<<j))
            elif ((wwallet[i])) ; then
                g+=($(sed -n '1p' "$TmpDir/$key/w/g/" )) || return 255
                sed -i '1d' "$TmpDir/$key/w/g/" || return 255
                ((wwallet[i]--))
            else
                ((ref2=ref>>1))
                for ((j=1;j++;ref>>j)) ; do 
                    if ((vwallet[i-j] >= (1<<j) ))
                # TODO : search in smallest grains
                ((ret=(ref+ret>253?253:ref+ret)))
            fi
        fi
        ((i))
    done
    return $ret
}
