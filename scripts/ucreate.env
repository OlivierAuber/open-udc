#!/bin/bash

function udc_loadcsheet {
# Argument 1: complete creation sheet to load (.sheet) , or just first part (.env)
# Argument 2: (optionnal) second part of creation sheet (.list) if first argument is only first part (.env)
# Return true if OK, -1 if fail.
    unset csha1
    if ! head -n 1 "$1" | grep "^udcdata=" > /dev/null || ! eval $(gawk ' /^[[:space:]]*d=idlist\>/ { print "nstart="NR ; exit } {print} ' "$1") ; then
        echo "$udc_call: Error: file \"$1\" is invalid" >&2
        return -1
    fi

    if [ "$udcdata" != "cset1.env" ] ; then
        echo "$udc_call: Sorry, unsupported version ($udcdata)" >&2
        return -1
    fi

    if [ -z "$curname" ] || [ -z "$setnum" ] || ((${#factors[*]}!=48)) || [ -z "$idnumber" ] ; then
        echo "$udc_call: Error: file \"$1\" is invalid" >&2
        return -1
    fi

    if ((idnumber!=$(gawk 'END { print NR }' <(cat "$1" "$2" 2>/dev/null))-nstart)) || (( idnumber!=$(grep -c "^[[:xdigit:]]\{40\}:udid" <(cat "$1" "$2" 2>/dev/null) ) )) ; then
        echo $(gawk 'END { print NR }' "$1") $nstart 
        echo "$udc_call: Error: file(s) \"$1\" \"$2\" invalid(s)" >&2
        return -1
    fi

    for ((i=0;i<48;i++)) ; do
        if ((factors[i])) ; then
            ((value+=$(echo $(((48-i)%3?(48-i)%3:5))*10^$(((47-i)/3)) | bc -l )*factors[i]))
        fi
    done 

    csha1="$(sha1sum -t <(cat "$1" "$2" 2>/dev/null) | cut -d ' ' -f 1)"
    echo -e "\n Set n°$setnum:\n"\
            "\tNumber of Individuals: $idnumber\n"\
            "\tMonetary Dividend: $(echo "scale=2; $value/100" | bc -l ) ${curname}s" >&2
}

function udc_gencsheet {
# gen a complete sheet in the $TmpDir
# Argument 1: number of sheet to gen
# Return true if OK, -1 if fail.
    if (($1>$(gawk ' END { print NR } ' "$udcHOME/$Currency/c/status"))) ; then 
        echo "$udc_call: Error: need sheet $(($1-1)) to regen sheet $1 " >&2
        return -1
    fi

    if (($1==0)) ; then
        udc_GET "${PubServList[0]}/$Currency/c/cset-$i.env"
    fi


    for ((i=$1;i>0;i--)) ; do  #Note: bash make here no difference between "i--" and "--i". Is that a bug ?
        [ -f "$udcHOME/$Currency/c/cset-$i.list" ] && break
    done


}



function UDsyncCreation {

    helpmsg='
    Usage: '"${udc_call:-UDcreate}"' [options]
'
    for ((i=0;$#;)) ; do 
        case "$1" in
            -h|--h*) usage ; $udc_exit ;;
            -V|--vers*) echo $udcVersion ; $udc_exit ;;
            -*|--*) echo "$udc_call:Error: Unrecognized option $1" >&2 ; usage ; $udc_exit 102 ;;
            *) break ;;
        esac
        shift
    done

    if udc_GET "${PubServList[0]}/$Currency/c/status" > "$TmpDir/cset.status" ; then
        lnstatus=$(gawk ' END { print NR } ' "$udcHOME/$Currency/c/status")
        if diff "$udcHOME/$Currency/c/status" <(head -n $lnstatus "$TmpDir/cset.status") ; then 
            echo -e "$udc_call:Error: your creation status is incompatible with the one on the publication server\n"\
                    "  Maybe nasty things happens to you, or to the publication server.">&2
            $udc_exit 160
        fi
        if ((lnstatus==0)) ; then #Première fiche de creation
            if ! udc_GET "${PubServList[0]}/$Currency/c/0.sheet" > "$TmpDir/0.sheet"  ; then
                echo "$udc_call:Error: Unable to retrieve creation sheet n°0" >&2
                $udc_exit 161
            fi
            udc_loadcsheet "$TmpDir/0.sheet" || $udc_exit 162
            if [ "$csha1" != "$(sed -n '1p' "$TmpDir/cset.status")" ] ; then
                echo "$udc_call:Error: creation sheet n°0 don't match published status" >&2
                $udc_exit 163
            fi
            head -n $((nstart-1)) "$TmpDir/0.sheet" > "$udcHOME/$curname/c/$setnum.env"
            tail -n +$((nstart)) "$TmpDir/0.sheet" > "$udcHOME/$curname/c/$setnum.list"
            gawk -v line=$setnum ' {if (line!=(FNR-1)) {print} else print "'"$csha1"' p" } END { if (line>=FNR) { for (i=FNR;i<line;i++) {print "" } ; print "'"$csha1"' p" } } ' "$udcHOME/$curname/c/status" >  "$TmpDir/ctmpstatus"
            mv "$TmpDir/ctmpstatus" "$udcHOME/$curname/c/status"
            rm -vf "$TmpDir/0."*
            ((lnstatus++))
        fi

        for ((i=lnstatus;i<$(gawk ' END { print NR } ' "$TmpDir/cset.status");i++)) ; do
            # get the missing sheets
            if ! udc_GET "${PubServList[0]}/$Currency/c/$i.env" > "$TmpDir/cset-$i.env" || ! udc_GET "${PubServList[0]}/$Currency/c/$i.list.diff" > "$TmpDir/cset-$i.list.diff" >  ; then
                echo -e "$udc_call:Error: Unable to retrieve creation sheet n°$i\n"\
                $udc_exit 156
            fi
            udc_gencsheet $i || $udc_exit 162
            udc_loadcsheet "$TmpDir/$i.sheet" || $udc_exit 163
            if [ "$csha1" != "$(sed -n '1p' "$TmpDir/cset.status")" ] ; then
                echo "$udc_call:Error: creation sheet n°0 don't match published status" >&2
                $udc_exit 162
            fi
            head -n $((nstart-1)) "$TmpDir/0.sheet" > "$udcHOME/$curname/c/$setnum.env"
            tail -n +$((nstart)) "$TmpDir/0.sheet" > "$udcHOME/$curname/c/$setnum.list"
            gawk -v line=$setnum ' {if (line!=(FNR-1)) {print} else print "'"$csha1"' p" } END { if (line>=FNR) { for (i=FNR;i<line;i++) {print "" } ; print "'"$csha1"' p" } } ' "$udcHOME/$curname/c/status" >  "$TmpDir/ctmpstatus"
            mv "$TmpDir/ctmpstatus" "$udcHOME/$curname/c/status"
 




        done
    else
        echo "$udc_call:Error: unable to retrieve creation status from publication server(s)" >&2 ; $udc_exit 104
    fi
    $udc_exit

    #We have to test that the OpenUDC home contain all the validated cset file (with the network i.e the publication serveur in the first time).
    #if ! preuve qu'on est à jour ; then
    #   rsync ...
    #fi

    if pfiles=$(find "$udcHOME/$curname/c/$((setnum>0?setnum-1:0))."* ) ; then
        #cherche dedans
    else
        #on ne peut verifier proposer de fiche
    fi

    #mkdir -p "$udcHOME/$curname/c"
    mkdir -p "$udcHOME/$curname/k/$mykey/p"
    head -n $((nstart-1)) "$1" > "$udcHOME/$curname/k/$mykey/p/$setnum.env"
    tail -n +$((nstart)) "$1" > "$udcHOME/$curname/k/$mykey/p/$setnum.list"

    #myudid="$(([ "$myudid2h" ] && grep -o "$myudid2h" $1 ) || ([ "$myudid2c" ] && grep -o "$myudid2c" $1 ) || ([ "$myudid1" ] && grep -o "$myudid1" $1 ))"
    if [ "$myudid2h" ] && myline="$(grep -n "\<$myudid2h\>" "$udcHOME/$curname/c/$setnum.list" )" ; then
        myudid="$myudid2h"
    elif [ "$myudid2c" ] && myline="$(grep -n "\<$myudid2c\>" "$udcHOME/$curname/c/$setnum.list" )" ; then
        myudid="$myudid2c"
    elif [ "$myudid1" ] && myline="$(grep -n "\<$myudid1\>" "$udcHOME/$curname/c/$setnum.list" )" ; then
        myudid="$myudid1"
    else
        echo -e "\n Sorry, your udid is not in the creation set\n" >&2
        $udc_exit 110
    fi

    myindex=$((${myline%%:*}-2))
    mykey="$(echo "$myline" | cut -d ':' -f 2)"

    echo -e "\n udid=\"$myudid\"\n key=$mykey position=$myindex"

    if ! echo "${mykeys[*]}" | grep "$mykey" > /dev/null ; then
        echo -e "\n Oups ! the keyID associated with your udid ($mykey) is not\n"\
                "one of yours here (${mykeys[*]}).\n"\
                "If there is a mistake in the creation sheet, please alert quickly.\n" >&2
        $udc_exit 105
    fi

    while true ; do
        echo
        read -p "Do you validate this creation set (y/n) ? " rep 
        case "$rep" in
          [yY]*)
            read -t 3 -p "Okay, let's create your part of money !"
            echo -e "\n"

            #KeyID collision in 2 differents creation sheet time are not managed today
            mkdir -p "$udcHOME/$curname/k/$mykey/w/$setnum"
            rm -f "$udcHOME/$curname/k/$mykey/w/$setnum/*"
            cfile="$udcHOME/$curname/k/$mykey/c.$setnum.gpg"
            csha1="$(sha1sum -t "$1" | cut -d ' ' -f 1)"
            (echo -e "d=t2c\nc=$curname\nh=$csha1\nb=(" ;
            for ((i=0;i<48;i++)) ; do
                if ((factors[i])) ; then
                    value="$(echo $(((48-i)%3?(48-i)%3:5))*10^$(((47-i)/3)) | bc -l )"
                    for ((j=0;j<factors[i];j++)) ; do
                        k=$((factors[i]*myindex+j))
                        echo -n "$value-$setnum-$k.0 "
                        echo "$value-$setnum-$k c.$setnum" >> "$udcHOME/$curname/k/$mykey/w/$setnum/$value"
                    done
                    echo
                fi
            done ;
            echo ")") | $udc_gpg --sign -u "${mykey}!" > "$cfile"
            # Then we have to publish this creation... and hurry (before dlimc).
            break
            ;;
          [nN]*)
            echo "Okay. If you have not already, please express (to the community) why you disagree."
            break
            ;;
          *)
            echo "  please answer \"yes\" or \"no\""
            ;;
        esac
    done
}

##########################

function UDvoteCreation {

    helpmsg='
Usage: '"${udc_call:-UDvotec}"' [options] [CREATION_SHEET]
'
    for ((i=0;$#;)) ; do 
        case "$1" in
            -h|--h*) usage ; $udc_exit ;;
            -V|--vers*) echo $udcVersion ; $udc_exit ;;
            -*|--*) echo "$udc_call:Error: Unrecognized option $1" >&2 ; usage ; $udc_exit 102 ;;
            *) break ;;
        esac
        shift
    done

    if [ -z "$1" ] ; then

        echo "Sorry, works to auto-synchronize creation with publications servers is still in progress..." >&2
        echo "Usage: $0 [CREATION_SHEET]" >&2

        if udc_GET "${PubServList[0]}/$Currency/c/status" > "$TmpDir/cset.status" ; then
            lnstatus=$(gawk ' END { print NR } ' "$udcHOME/$Currency/c/status")
            if diff "$udcHOME/$Currency/c/status" <(head -n $lnstatus "$TmpDir/cset.status") ; then 
                echo -e "$udc_call:Error: your status is incompatible with the one on the publication server\n"\
                        "  Maybe nasty things happens to you, or to the publication server.">&2
                $udc_exit 166
            fi
            for ((i=lnstatus-1;i<$(gawk ' END { print NR } ' "$TmpDir/cset.status");i++)) ; do
                # get the missing sheets


            done
        else
            echo "$udc_call:Error: unable to retrieve creation status from publication server(s)" >&2 ; $udc_exit 104
        fi
        $udc_exit
    fi

    #We have to test that the OpenUDC home contain all the validated cset file (with the network i.e the publication serveur in the first time).
    #if ! preuve qu'on est à jour ; then
    #   rsync ...
    #fi

    for ((i=0;i<48;i++)) ; do
        if ((factors[i])) ; then
            ((value+=$(echo $(((48-i)%3?(48-i)%3:5))*10^$(((47-i)/3)) | bc -l )*factors[i]))
        fi
    done 

    echo -e "\n Set n°$setnum:\n"\
            "\tNumber of Individuals: $idnumber\n"\
            "\tMonetary Dividend: $(echo "scale=2; $value/100" | bc -l ) ${curname}s"

    if (($(date +%s)>$(date -d "$dlimc" +%s))) ; then
        echo "$udc_call:Warning: this set of creation ($setnum) has expired" >&2
    fi

    if pfiles=$(find "$udcHOME/$curname/c/$((setnum>0?setnum-1:0))."* ) ; then
        #cherche dedans
    else
        #on ne peut verifier proposer de fiche
    fi

    #mkdir -p "$udcHOME/$curname/c"
    mkdir -p "$udcHOME/$curname/k/$mykey/p"
    head -n $((nstart-1)) "$1" > "$udcHOME/$curname/k/$mykey/p/$setnum.env"
    tail -n +$((nstart)) "$1" > "$udcHOME/$curname/k/$mykey/p/$setnum.list"

    #myudid="$(([ "$myudid2h" ] && grep -o "$myudid2h" $1 ) || ([ "$myudid2c" ] && grep -o "$myudid2c" $1 ) || ([ "$myudid1" ] && grep -o "$myudid1" $1 ))"
    if [ "$myudid2h" ] && myline="$(grep -n "\<$myudid2h\>" "$udcHOME/$curname/c/$setnum.list" )" ; then
        myudid="$myudid2h"
    elif [ "$myudid2c" ] && myline="$(grep -n "\<$myudid2c\>" "$udcHOME/$curname/c/$setnum.list" )" ; then
        myudid="$myudid2c"
    elif [ "$myudid1" ] && myline="$(grep -n "\<$myudid1\>" "$udcHOME/$curname/c/$setnum.list" )" ; then
        myudid="$myudid1"
    else
        echo -e "\n Sorry, your udid is not in the creation set\n" >&2
        $udc_exit 110
    fi

    myindex=$((${myline%%:*}-2))
    mykey="$(echo "$myline" | cut -d ':' -f 2)"

    echo -e "\n udid=\"$myudid\"\n key=$mykey position=$myindex"

    if ! echo "${mykeys[*]}" | grep "$mykey" > /dev/null ; then
        echo -e "\n Oups ! the keyID associated with your udid ($mykey) is not\n"\
                "one of yours here (${mykeys[*]}).\n"\
                "If there is a mistake in the creation sheet, please alert quickly.\n" >&2
        $udc_exit 105
    fi

    while true ; do
        echo
        read -p "Do you validate this creation set (y/n) ? " rep 
        case "$rep" in
          [yY]*)
            read -t 3 -p "Okay, let's create your part of money !"
            echo -e "\n"

            #KeyID collision in 2 differents creation sheet time are not managed today
            mkdir -p "$udcHOME/$curname/k/$mykey/w/$setnum"
            rm -f "$udcHOME/$curname/k/$mykey/w/$setnum/*"
            cfile="$udcHOME/$curname/k/$mykey/c.$setnum.gpg"
            (echo -e "d=t2c\nc=$curname\nh=$csha1\nb=(" ;
            for ((i=0;i<48;i++)) ; do
                if ((factors[i])) ; then
                    value="$(echo $(((48-i)%3?(48-i)%3:5))*10^$(((47-i)/3)) | bc -l )"
                    for ((j=0;j<factors[i];j++)) ; do
                        k=$((factors[i]*myindex+j))
                        echo -n "$value-$setnum-$k.0 "
                        echo "$value-$setnum-$k c.$setnum" >> "$udcHOME/$curname/k/$mykey/w/$setnum/$value"
                    done
                    echo
                fi
            done ;
            echo ")") | $udc_gpg --sign -u "${mykey}!" > "$cfile"
            # Then we have to publish this creation... and hurry (before dlimc).
            break
            ;;
          [nN]*)
            echo "Okay. If you have not already, please express (to the community) why you disagree."
            break
            ;;
          *)
            echo "  please answer \"yes\" or \"no\""
            ;;
        esac
    done

}

