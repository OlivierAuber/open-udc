#!/bin/bash

function udc_loadcsheet {
# Argument 1: complete creation sheet to load (.sheet) , or just first part (.env)
# Argument 2: (optionnal) second part of creation sheet (.list) if first argument is only first part (.env)
# Return true if OK, 1 if fail.
    unset csha1 value idnumber factors setnum curname udcdata nstart 
    if ! head -n 1 "$1" | grep "^udcdata=" > /dev/null || ! eval $(gawk ' /^[[:space:]]*d=idlist\>/ { print "nstart="NR ; exit } {print} ' <(cat "$1" "$2" 2>/dev/null) ) ; then
        echo "$udc_call: Error: file \"$1\" is invalid" >&2
        return 1
    fi

    if [ "$udcdata" != "cset1.env" ] ; then
        echo "$udc_call: Sorry, unsupported version ($udcdata)" >&2
        return 1
    fi

    if [ -z "$curname" ] || [ -z "$setnum" ] || ((${#factors[*]}!=48)) || [ -z "$idnumber" ] || ((nstart!=6)) ; then
        echo "$udc_call: Error: file \"$1\" is invalid" >&2
        return 1
    fi

    if ((idnumber!=$(gawk 'END { print NR }' <(cat "$1" "$2" 2>/dev/null))-nstart)) || (( idnumber!=$(grep -c "^[[:xdigit:]]\{40\}:udid" <(cat "$1" "$2" 2>/dev/null) ) )) ; then
        echo "$udc_call: Error: file(s) \"$1\" \"$2\" invalid(s)" >&2
        return 1
    fi

    for ((il=0;il<48;il++)) ; do
        if ((factors[il]>0)) ; then
            if ((factors[il]>15)) ; then 
                echo "$udc_call: Error: file(s) \"$1\" is invalid" >&2
                return 1
            fi
            ((value+=$(echo $(((48-il)%3?(48-il)%3:5))*10^$(((47-il)/3)) | bc -l )*factors[il]))
        fi
    done 

    csha1="$(sha1sum -t <(cat "$1" "$2" 2>/dev/null) | cut -d ' ' -f 1)" || return 1
    echo -e "\n Set n°$setnum:\n"\
            "\tNumber of Individuals: $idnumber\n"\
            "\tMonetary Dividend: $(echo "scale=2; $value/100" | bc -l ) ${curname}s\n"\
            "\t(hash: $csha1)" >&2
    unset il
}

function udc_genclist {
# gen the list of a sheet in the $TmpDir
# Argument 1: number of sheet to gen
# Return true if OK, 1 if fail.
    if [ -f "$udcHOME/$Currency/c/$1.list" ] ; then
        # just make a link
        ln -s "$udcHOME/$Currency/c/$1.list" "$TmpDir/$1.list"
        return
    fi

    if (($1>$(gawk ' END { print NR } ' "$udcHOME/$Currency/c/status.cset1.env"))) ; then 
        echo "$udc_call: Error: need sheet $(($1-1)) to regen list of sheet $1 " >&2
        return 1
    fi

    #if (($1==0)) ; then # ... this case should not occurs because "$udcHOME/$Currency/c/0.list" sould exist

    for ((ig=$1-1;ig>0;ig--)) ; do  #Note: bash make here no difference between "i--" and "--i". Is that a bug ?
        [ -f "$udcHOME/$Currency/c/$ig.list" ] && break
    done
    cp "$udcHOME/$Currency/c/$ig.list" "$TmpDir/$1.list"
    for ((jg=$ig+1;jg<=$1;jg++)) ; do
        patch "$TmpDir/$1.list" "$udcHOME/$Currency/c/$jg.list.diff" 2> /dev/null || patch "$TmpDir/$1.list" "$TmpDir/$jg.list.diff" || return 1
    done
    unset ig jg
}

function udc_check {
# check if the member is in the list of a creation sheet.
# Argument 1: number of creation list to chek.
# Return 1 if an error occurs, true otherwise.
# StdOut: "key index" if found, empty string if not.
    
    [ -e "$TmpDir/$1.list" ] || udc_genclist "$1" || return 1
 
    if [ "$myudid2h" ] && myline="$(grep -n "\<$myudid2h\>" "$TmpDir/$1.list" )" ; then
        myudid="$myudid2h"
    elif [ "$myudid2c" ] && myline="$(grep -n "\<$myudid2c\>" "$TmpDir/$1.list" )" ; then
        myudid="$myudid2c"
    elif [ "$myudid1" ] && myline="$(grep -n "\<$myudid1\>" "$TmpDir/$1.list" )" ; then
        myudid="$myudid1"
    else
        echo -e " Your udid is not in the creation sheet n°$setnum\n" >&2
        return
    fi

    mykey="$(echo "$myline" | cut -d ':' -f 2)"

    if ! echo "${mykeys[*]}" | grep "$mykey" > /dev/null ; then
        echo -e "\n Oups ! the keyID associated with your udid in the list ($mykey)\n"\
                "is not one of the private key(s) on this machine (${mykeys[*]}).\n"\
                "(If there is a mistake in the creation sheet, please alert quickly.)\n" >&2
        return
    fi
    myindex=$((${myline%%:*}-2))
    echo -e "$mykey $myindex"
    unset myline myudid mykey myindex
}


function udc_create {
# create and publish a part of money according to the loaded creation sheet.
# Argument 1: the key to use to sign.
# Argument 2: the index of the creator in the list.
# Return true if OK, -1 if fail.

    if [ -z "$1" ] || [ -z "$2" ] ; then
        # Do Nothing
        #echo "$udc_call: Error: missings args for udc_create() " >&2
        return 0
    fi

    # create temporary dir to index money before validation by publication server
    mkdir -p "$udcHOME/$curname/k/$1/w"
    cfile="$udcHOME/$curname/k/$1/c.$setnum.gpg"
    (echo -e "d=t2c\nc=$curname\nh=$csha1\nb=(" ;
    for ((ic=0;ic<48;ic++)) ; do
        if ((factors[ic])) ; then
            value="$(echo $(((48-ic)%3?(48-ic)%3:5))*10^$(((47-ic)/3)) | bc -l )"
            for ((jc=0;jc<factors[ic];jc++)) ; do
                kc=$((factors[ic]*$2+jc))
                echo -n "$value-$setnum-$kc.0 "
                echo "$value-$setnum-$kc c.$setnum" >> "$udcHOME/$curname/k/$1/w/$value"
            done
            echo
        fi
    done ;
    echo ")") | $udc_gpg --sign -u "$1!" > "$cfile" || return 1

    #publish the creation
    #udc_POST ...
    unset cfile ic jc kc
}

function UDsyncCreation {

    helpmsg='
    Usage: '"${udc_call:-UDcreate}"' [options]
'
    for ((i=0;$#;)) ; do 
        case "$1" in
            -h|--h*) usage ; $udc_exit ;;
            -V|--vers*) echo $udcVersion ; $udc_exit ;;
            -*|--*) echo "$udc_call:Error: Unrecognized option $1" >&2 ; usage ; $udc_exit 102 ;;
            *) break ;;
        esac
        shift
    done

    if ! udc_GET "${PubServList[0]}/$Currency/c/status.cset1.env" > "$TmpDir/cset.status" ; then
        echo "$udc_call:Error: unable to retrieve creation status from publication server(s)" >&2 ; $udc_exit 104
    fi

    lnstatus=$(gawk ' END { print NR } ' "$udcHOME/$Currency/c/status.cset1.env")
    if ! diff "$udcHOME/$Currency/c/status.cset1.env" <(head -n $lnstatus "$TmpDir/cset.status") ; then 
        echo -e "$udc_call:Error: your creation status is incompatible with the one on the publication server\n"\
                "  Maybe nasty things happens to you, or to the publication server.">&2
        $udc_exit 160
    fi
    if diff "$udcHOME/$Currency/c/status.cset1.env" "$TmpDir/cset.status" ; then
        echo -e " Your creation status is the last published, nothing to do ! :-)" >&2
        $udc_exit
    fi

    if ((lnstatus==0)) ; then
        # GET and load first creation sheet
        if ! udc_GET "${PubServList[0]}/$Currency/c/0.sheet" > "$TmpDir/0.sheet"  ; then
            echo "$udc_call:Error: Unable to retrieve creation sheet n°0 " >&2
            $udc_exit 161
        fi
        udc_loadcsheet "$TmpDir/0.sheet" || $udc_exit 162
        # verify hash of first creation sheet
        if [ "$csha1" != "$(sed -n '1p' "$TmpDir/cset.status")" ] ; then
            echo "$udc_call:Error: creation sheet n°0 don't match published status" >&2
            $udc_exit 163
        fi
        # save localy the first creation sheet
        head -n $((nstart-1)) "$TmpDir/0.sheet" > "$udcHOME/$curname/c/$setnum.env" || $udc_exit 162
        tail -n +$((nstart)) "$TmpDir/0.sheet" > "$udcHOME/$curname/c/$setnum.list" || $udc_exit 162
        # Check if we are in and make and publish the creation if so
        myline=($(udc_check 0)) || $udc_exit 164
        udc_create "${myline[@]}" || $udc_exit 165
        # Update local status
        gawk -v line=$setnum ' {if (line!=(FNR-1)) {print} else print "'"$csha1"'" } END { if (line>=FNR) { for (i=FNR;i<line;i++) {print "" } ; print "'"$csha1"'" } } ' "$udcHOME/$curname/c/status.cset1.env" >  "$TmpDir/ctmpstatus"
        mv "$TmpDir/ctmpstatus" "$udcHOME/$curname/c/status.cset1.env"
        ((lnstatus++))
        # Clean $TmpDir
        rm -vf "$TmpDir/0."*
    fi

    for ((i=lnstatus;i<$(gawk ' END { print NR } ' "$TmpDir/cset.status");i++)) ; do
        # GET and load the other missing sheets
        if ! udc_GET "${PubServList[0]}/$Currency/c/$i.env" > "$TmpDir/$i.env" || ! udc_GET "${PubServList[0]}/$Currency/c/$i.list.diff" > "$TmpDir/$i.list.diff"  ; then
            echo "$udc_call:Error: Unable to retrieve creation sheet n°$i " >&2
            $udc_exit 161
        fi
        udc_genclist $i || $udc_exit 162
        udc_loadcsheet "$TmpDir/$i.env" "$TmpDir/$i.list" || $udc_exit 163
        # verify hash of first creation sheet
        if [ "$csha1" != "$(sed -n "$((i+1))p" "$TmpDir/cset.status")" ] ; then
            echo "$udc_call:Error: creation sheet n°$i don't match published status" >&2
            $udc_exit 163
        fi
        # save localy the first creation sheet
        if ((i%12)) ; then
            cp "$TmpDir/$i.env" "$TmpDir/$i.list.diff" "$udcHOME/$curname/c/" || $udc_exit 162
        else
            cp "$TmpDir/$i.env" "$TmpDir/$i.list" "$udcHOME/$curname/c/" || $udc_exit 162
        fi
        # Check if we are in and make and publish the creation if so
        myline=($(udc_check $i)) || $udc_exit 164
        udc_create "${myline[@]}" || $udc_exit 165
        # Update local status
        gawk -v line=$setnum ' {if (line!=(FNR-1)) {print} else print "'"$csha1"'" } END { if (line>=FNR) { for (i=FNR;i<line;i++) {print "" } ; print "'"$csha1"'" } } ' "$udcHOME/$curname/c/status.cset1.env" >  "$TmpDir/ctmpstatus"
        mv "$TmpDir/ctmpstatus" "$udcHOME/$curname/c/status.cset1.env"
        # Clean $TmpDir
        rm -vf "$TmpDir/$i."* ## Note: It may be optimized a bit, to avoid to re-apply first patch.
    done
    $udc_exit
}

##########################

function UDvoteCreation {

    helpmsg='
Usage: '"${udc_call:-UDvotec}"' [options] [CREATION_SHEET]
'
    for ((i=0;$#;)) ; do 
        case "$1" in
            -h|--h*) usage ; $udc_exit ;;
            -V|--vers*) echo $udcVersion ; $udc_exit ;;
            -*|--*) echo "$udc_call:Error: Unrecognized option $1" >&2 ; usage ; $udc_exit 102 ;;
            *) break ;;
        esac
        shift
    done

    if [ -z "$1" ] ; then

        echo "Sorry, works to auto-synchronize creation with publications servers is still in progress..." >&2
        echo "Usage: $0 [CREATION_SHEET]" >&2

        if udc_GET "${PubServList[0]}/$Currency/c/status.cset1.env" > "$TmpDir/cset.status" ; then
            lnstatus=$(gawk ' END { print NR } ' "$udcHOME/$Currency/c/status.cset1.env")
            if diff "$udcHOME/$Currency/c/status.cset1.env" <(head -n $lnstatus "$TmpDir/cset.status") ; then 
                echo -e "$udc_call:Error: your status is incompatible with the one on the publication server\n"\
                        "  Maybe nasty things happens to you, or to the publication server.">&2
                $udc_exit 166
            fi
            # get the missing sheets
        else
            echo "$udc_call:Error: unable to retrieve creation status from publication server(s)" >&2 ; $udc_exit 104
        fi
        $udc_exit
    fi

    #We have to test that the OpenUDC home contain all the validated cset file (with the network i.e the publication serveur in the first time).
    #if ! preuve qu'on est à jour ; then
    #   rsync ...
    #fi

    for ((i=0;i<48;i++)) ; do
        if ((factors[i])) ; then
            ((value+=$(echo $(((48-i)%3?(48-i)%3:5))*10^$(((47-i)/3)) | bc -l )*factors[i]))
        fi
    done 

    echo -e "\n Set n°$setnum:\n"\
            "\tNumber of Individuals: $idnumber\n"\
            "\tMonetary Dividend: $(echo "scale=2; $value/100" | bc -l ) ${curname}s"

    if (($(date +%s)>$(date -d "$dlimc" +%s))) ; then
        echo "$udc_call:Warning: this set of creation ($setnum) has expired" >&2
    fi

    #if pfiles=$(find "$udcHOME/$curname/c/$((setnum>0?setnum-1:0))."* ) ; then
        #cherche dedans
    #else
        #on ne peut verifier proposer de fiche
    #fi

    #mkdir -p "$udcHOME/$curname/c"
    mkdir -p "$udcHOME/$curname/k/$mykey/p"
    head -n $((nstart-1)) "$1" > "$udcHOME/$curname/k/$mykey/p/$setnum.env"
    tail -n +$((nstart)) "$1" > "$udcHOME/$curname/k/$mykey/p/$setnum.list"

    #myudid="$(([ "$myudid2h" ] && grep -o "$myudid2h" $1 ) || ([ "$myudid2c" ] && grep -o "$myudid2c" $1 ) || ([ "$myudid1" ] && grep -o "$myudid1" $1 ))"
    if [ "$myudid2h" ] && myline="$(grep -n "\<$myudid2h\>" "$udcHOME/$curname/c/$setnum.list" )" ; then
        myudid="$myudid2h"
    elif [ "$myudid2c" ] && myline="$(grep -n "\<$myudid2c\>" "$udcHOME/$curname/c/$setnum.list" )" ; then
        myudid="$myudid2c"
    elif [ "$myudid1" ] && myline="$(grep -n "\<$myudid1\>" "$udcHOME/$curname/c/$setnum.list" )" ; then
        myudid="$myudid1"
    else
        echo -e "\n Sorry, your udid is not in the creation set\n" >&2
        $udc_exit 110
    fi

    myindex=$((${myline%%:*}-2))
    mykey="$(echo "$myline" | cut -d ':' -f 2)"

    echo -e "\n udid=\"$myudid\"\n key=$mykey position=$myindex"

    if ! echo "${mykeys[*]}" | grep "$mykey" > /dev/null ; then
        echo -e "\n Oups ! the keyID associated with your udid ($mykey) is not\n"\
                "one of yours here (${mykeys[*]}).\n"\
                "If there is a mistake in the creation sheet, please alert quickly.\n" >&2
        $udc_exit 105
    fi

    while true ; do
        echo
        read -p "Do you validate this creation set (y/n) ? " rep 
        case "$rep" in
          [yY]*)
            read -t 3 -p "Okay, let's create your part of money !"
            echo -e "\n"

            #KeyID collision in 2 differents creation sheet time are not managed today
            mkdir -p "$udcHOME/$curname/k/$mykey/w/$setnum"
            echo rm -f "$udcHOME/$curname/k/$mykey/w/$setnum/*"
            cfile="$udcHOME/$curname/k/$mykey/c.$setnum.gpg"
            (echo -e "d=t2c\nc=$curname\nh=$csha1\nb=(" ;
            for ((i=0;i<48;i++)) ; do
                if ((factors[i])) ; then
                    value="$(echo $(((48-i)%3?(48-i)%3:5))*10^$(((47-i)/3)) | bc -l )"
                    for ((j=0;j<factors[i];j++)) ; do
                        k=$((factors[i]*myindex+j))
                        echo -n "$value-$setnum-$k.0 "
                        echo "$value-$setnum-$k c.$setnum" >> "$udcHOME/$curname/k/$mykey/w/$setnum/$value"
                    done
                    echo
                fi
            done ;
            echo ")") | $udc_gpg --sign -u "${mykey}!" > "$cfile"
            # Then we have to publish this creation... and hurry (before dlimc).
            break
            ;;
          [nN]*)
            echo "Okay. If you have not already, please express (to the community) why you disagree."
            break
            ;;
          *)
            echo "  please answer \"yes\" or \"no\""
            ;;
        esac
    done

}

