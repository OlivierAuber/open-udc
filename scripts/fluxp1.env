#!/bin/bash

# fluxp1 is an experimental REST (meta-)protocol which may give access to any URI and provide meta-operation like commpressing, md5 control, size, encrypting authentifing.
# fluxp1 may also encapsulate itself, (and use that to fully-encrypt a communication).
# fluxp1 is not client-server oriented only : the format exchanged is the same for all. It also could be use in P2P architecture.
# fluxp1 understand only 3 verb:
#   * ask: which is used to ask for a ressource (similar and "compatible" with HTTP GET). 
#   * define: which is use to send data or respond to an previous ask (similar to HTTP POST or PUT depending on the URI and the way it's managed).
#   * reply: which is the fluxp1 protocol response to an ask or a define. Not mandatory: usually use to explain ask error, or to inform about define success.
# fluxp1 understand and may do 2 kinds of  meta-operation :
#   ** Those on the data of the ressources:
#       * gz: which ask/define a compressed ressource (with gzip).
#       * gpg: which ask/define a signed and/or encrypted ressource (depending on previous define in the fluxp1 protocol itself) (with GnuPG).
#   ** Those related to the data of the ressources:
#       * sig: which ask/define the detached signature of a ressource (with GnuPG).
#       * size: which ask/define the size in bytes of the ressource.
#       * size.gpg: combine size operation with GnuPG
#       * md5: which ask/define the md5sum of the ressource.
#       * sha1: which ask/define the sha1sum of the ressource.
# fluxp1 agent receving an ask with a transform meta-operation may ignore it, as well that this agent may take the initiative to compress, or sign or encrypt or send extra information about this ressource.

## Some other meta-operation may be supported depending on the URI support :
##  * tar: which ask for the ressource to be archived (when a ressource is readable as a list of other ressources, eg: directories).
##  * tar.gz: combine tar operation with gzip
##  * tar.gpg: combine tar operation with GnuPG
##  * diff: which ask for the last diff of a versioned ressource.
##  * diff.gz: combine diff operation with gzip
##  * diff.gpg: combine diff operation with GnuPG
##  * version: which ask for the version of a versioned ressource.
##  * changelog: which ask for the last changelog of a versioned ressource.

# fluxp1 format consist 6 human-readable fields, separated by the Unit Separation Character 0x1F, in a line defined as between 2 characters 0x0A.
x1f=$(echo -e "\x1F")
# First 5 fields are encoded with printable US-ASCII characters only, the 6th one is for comment and may use UTF-8.
# Fields definition:
##  * 1: Protocol: contain the case-insensitive magic "fluxp1"
##  * 2: Verb: contain the verb in a 3-letter word : "ask", "def" or "rep".
##  * 3: Nums: meaning differ from verb :
##      - ask: match ^([0-9]+-)?[0-9]*l?$ 
##          * if the characters l is present it ask to count the data size by lines (end with 0x0A) instead of bytes.
##          * empty to ask for the whole ressource regardless its size.
##          * range to ask for a part of the whole ressource.
##          * a number n, which is equivalent to a range 0-n.
##          * a incomplete range "n-" to ask for the ressource whithout first n bytes (or lines).
##          * "0" or a null range "n-n" is accepted to ask if the ressource exist.
##      - def: match ^([0-9]+-)?[0-9]*l?$ 
##          * if the characters l is present it tells the data size is in lines (end with 0x0A) instead of bytes.
##          * range for a part of the whole ressource.
##          * a number n, which is equivalent to a range 0-n.
##          * May be "0" or a null range "n-n".
##          * May be empty or with a undefined range "n-", but in this case the def is the last verb in the stream. The stream should be closed by an "END OF STREAM" or a timeout.
##      - rep: match [0-9]+
##          * status code of a fluxp1 reply (Note: fluxp1 may re-use some status code from HTTP or FTP ...)
##  * 4: URI: as described by RFC 3305. Note: URI may began by fluxp1:// to set/get parameters or encapsulate a (encrypted) fluxp1 stream.
##  * 5: Format: meta-operation as decribed above.
##  * 6: Comments. Meaning depends on verb, URI and meta-operation. 


function fluxp1 {
# Handle fluxp1 stream on stdin.
# Argument 1 (optionnal):  the OpenPGP public certificate used to sign or encrypt ressources.

    local key="$2" ret=1 ASK

        TmpD="$(mktemp -d --tmpdir="$TmpDir/" input.XXXX)" || return 2

    while IFS=$x1f read magic verb nums uri format comments ; do
       [[ "${magic,,}" != fluxp1 ]] && echo "fluxp1${x1f}rep${x1f}400${x1f}${x1f}${x1f}Bad Protocol" && break
        ASK=0
        case "$verb" in
          ask)
            ASK=1 ;;&
          def)
            if ! [[ "$num" =~ ^(([0-9]+)-)?([0-9]*)(l)?$ ]] ; then
                echo "fluxp1${x1f}rep${x1f}400${x1f}${x1f}${x1f}incorrect format $num"
                break
            fi
            uri_start=$((BASH_REMATCH[2])) # if BASH_REMATCH[2]==""  ; then uri_start=0   
            uri_end=${BASH_REMATCH[3]}
            IFS='/' read standard currency rtype etc < <(echo "$uri")
            case "${standard,,}" in
              openudc:)
                ;;
              http:)
                ;;
              *) 
                echo "fluxp1${x1f}rep${x1f}501${x1f}$uri${x1f}${x1f}$standard Unsupported"
                ;;
            esac

            ;;
          rep) ;;

         *)
            echo "fluxp1${x1f}rep${x1f}501${x1f}${x1f}${x1f}Not Implemented" && break
            ;;
        esac
    done
}


