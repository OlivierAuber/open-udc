#!/bin/bash

# Releases have only 2 numbers in the version. 3-numbers version are for devel
udcVersion="OpenUDC - 0.0.3"
udcHOME="~/.openudc"

# detect if we are lauch as a function or as a program
if [ "${0##*/}" == "bash" ] ; then
    unset udc_call
    udc_exit="return"
else
    udc_call="${0##*/}"
    udc_exit="exit"
fi

function UDinit {
    # Read or init the config file
    if ! ( [ -f "$udcHOME/udc.conf" ] && . "$udcHOME/udc.conf" \
        && [ "$PubServList" ] && [ "$KeyServList" ] \
        && [ "$Currency" ] && [ "$TmpDir" ] ); then
        mkdir -p "$udcHOME"
        cat << EOF > "$udcHOME/udc.conf"
# File generated $(date -R) by $udc_call - $udcVersion
# If you know what you do, modify it as you want
# ...but if you make a syntax error, it will be regenerated.
PubServList=("https://github.com/jbar/open-udc/tree/master/data")
KeyServList=("keys.gnupg.net")
Currency="uni"
TmpDir="/tmp"
EOF
        . "$udcHOME/udc.conf"
    fi

    # Check if GnuPG is available
    if gpg2 --version > /dev/null 2>&1 ; then 
        udc_gpg="gpg2"
    elif gpg --version > /dev/null 2>&1 ; then
        udc_gpg="gpg"
    else
        echo -e "\n$udc_call:Error: No gpg found in your \$PATH ($PATH)\n"\
                "please install GnuPG (http://www.gnupg.org/)\n" >&2
        $udc_exit 100
    fi

    # Check if curl or wget or GET and POST are available
    if ! ( curl --version > /dev/null || wget --version > /dev/null || (type GET && type POST )) ; then
        echo -e "\n$udc_call:Error: No tools to make http(s) requests in your \$PATH ($PATH)\n"\
                "please install curl or wget.\n" >&2
        $udc_exit 100
    fi

    # Get the fingerprint of the secret keys available here.
    mykeys=($($udc_gpg --list-secret-keys --with-colons --with-fingerprint --fingerprint | grep "^fpr" | cut -d: -f 10))
        # Warning: $mykeys contain non-signing key. It is not really annoying, but it's not clean.
    if [ -z "$mykeys" ] ; then 
        echo -e "\n$udc_call:Warning: No private key found here.\n" >&2
        while true ; do
            echo
            read -p " Have you already an OpenPGP certificate to import on this machine (y/n) ? " rep 
            case "$rep" in
              [yY]*)
                echo "Then you have to import it first, using \"gpg --import\" or your favorite frontend (http://www.gnupg.org/related_software/frontends.en.html)"
                $udc_exit
               ;;
              [nN]*)
                while true ; do
                    echo
                    read -p " Do you want to create your OpenPGP certificate on this machine (y/n) ? " rep 
                    case "$rep" in
                      [yY]*)
                        ###### TODO ######
                        echo -e "Sorry, This is not implemented yet\n"\
                                "You may create one using \"gpg --gen-key\" or your favorite frontend (http://www.gnupg.org/related_software/frontends.en.html)" >&2
                        $udc_exit
                        ;;
                      [nN]*)
                        echo "Okay. Maybe an other time or on an other machine (you trust)..."
                        $udc_exit 
                        ;;
                      *) echo "  please answer \"yes\" or \"no\"" ;;
                    esac
                done
                ;;
              *) echo "  please answer \"yes\" or \"no\"" ;;
            esac
        done
    fi

    # Get the udid
    myudid2h="$($udc_gpg --list-key --with-colons ${mykeys[0]} 2> /dev/null | sed -n ' s,.*(\(udid2;h;[[:xdigit:]]\{40\};[0-9]\+\)[;)].*,\1,p ' | head -n 1)"
    #myudid2c="$($udc_gpg --list-secret-keys 2> /dev/null | sed -n ' s,.*(\(udid2;c;[A-Z-]\{0,20\};[A-Z-]\{1,20\};[0-9-]\{10\};e[0-9.+-]\{13\};[0-9]\+\)[;)].*,\1,p ')"
    myudid2c="$($udc_gpg --list-key --with-colons ${mykeys[0]} 2> /dev/null | gawk --re-interval '/\(udid2;c;/ { print gensub(/[^(]*\((udid2;c;[A-Z]{1,20};[A-Z-]{1,20};[0-9-]{10};e[0-9.+-]{13};[0-9]+)[;)].*/, "\\1", "1") ; exit }' )"
    myudid1="$($udc_gpg --list-key --with-colons ${mykeys[0]} 2> /dev/null | sed -n ' s,.*(\(udid1;[^);]\+;[^);]\+;[^);]\+;[^);]\+\)[;)].*,\1,p ' | head -n 1 )" 

    if ! [ "$myudid2h" -o "$myudid2c" ] ; then 
        echo -e "\n$udc_call:Warning: No udid2 found in your main certificate:\n$($udc_gpg --list-key ${mykeys[0]} | head -n 2)\n" >&2
            while true ; do
                echo
                read -p " Do you want to add your udid2 inside it (y/n) ? " rep 
                case "$rep" in
                  [yY]*)
                    while true ; do
                        read -p " Do you prefer to hide or show your birthname, birthdate and birthplace (h/s) ? " rep 
                        case "$rep" in
                          [hH]*)
                            echo -e "Okay. We and all signatories will ask you them altough, to calculate the hash of your identity." >&2
                            udc_udid2c=0 ;;
                          [sS]*)
                            udc_udid2c=1 ;;
                          *) echo "  please answer \"hide\" or \"show\"" >&2 ;;
                        esac
                    done
                    mudid2=$(UDgenudid)
                    echo mudid2 >&2

                    for ((;;)) ; do
                        for ((;;)) ; do
                            read -p "Please enter your most used email adress ? " email
                            grep "^[^@[:space:]]\+@[^.[:space:]]\+\.[^[:space:]]\+$" <(echo $email) > /dev/null && break
                        done
                        
                        read -p "Please enter your most used name(s) (or surname, acronym, pseudonym...) ? " mname
                        echo -e "\nSummary:\n"\
                                "Used Name: $mname\n"\
                                "email: $email\n"
                        read -p "Is that correct ? (y/n) " answer
                        case "$answer" in 
                            Y* | y* | O* | o* )
                                break ;;
                        esac
                    done
                    cat << EOF | $udc_gpg --command-fd 0 --status-file /dev/null --allow-freeform-uid --edit-key ${mykeys[0]} 2> /dev/null
adduid
$mname
$email
$(grep "^udid2;h;" <(echo $mudid2))
save
EOF
                    if ((udc_udid2c)) ; then
                        cat << EOF | $udc_gpg --command-fd 0 --status-file /dev/null --allow-freeform-uid --edit-key ${mykeys[0]} 2> /dev/null
adduid
$mname
$email
$(grep "^udid2;c;" <(echo $mudid2))
save
EOF
                    fi 
                        ;;
                  [nN]*)
                    echo "Okay. Maybe an other time ..." >&2
                    if [ "$myudid1" ] ; then
                        echo "Reminder: the udid1 format is DEPRECATED !" >&2
                        break
                    else
                        $udc_exit
                    fi ;;
                  *) echo "  please answer \"yes\" or \"no\"" >&2 ;;
                esac
            done
    fi

    # Set default digest-algo up to SHA256 in GnuPG.
    # Note: useless for OpenUDC : input data are have to match too strict formats.
    if ! grep '^[^#]*\<personal-digest-preferences[[:space:]]\+SHA256\>' $HOME/.gnupg/gpg.conf > /dev/null ; then
        cat >> ~/.gnupg/gpg.conf <<EOF
# adds generated $(date -R) by $udc_call - $udcVersion
# Set up to SHA256, cf. http://www.debian-administration.org/users/dkg/weblog/48
personal-digest-preferences SHA256
cert-digest-algo SHA256
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
EOF
    fi
}

function udc_GET {
# Argument 1: http url to GET
# Return true if OK, -1 if fail.

    if curl -L "$1"\
        || wget -O - "$1"\
        || GET "$1" ; then
        return
    else
        return -1
    fi
}

function udc_chooseinlist {
# Argument 1: Prompt before the list
# Arguments 2...n : items to choose
# Return the number of the choosen item, 0 if no items.

    ret=0
    echo -n "$1"
    shift
    n=$#
    for ((i=0;$#;)) ; do
        if ((i%3)) ; then 
            echo -en "\t\t"
        else
            echo -en "\n\t"
        fi
        echo -en "$((++i))) $1"
        shift
    done
    echo
    while ((ret<1 || ret>n)) ; do
        read -p "Reply (1-$n) ? " ret
    done
    return $ret
}

function usage {
    echo "$helpmsg"
    echo -e "Global Options:\n"\
            "-h, --help          this help\n"\
            "-V, --version       version\n"
}


function UDgenudid {

    helpmsg='
Usage: '"${udc_call:-UDgenudid}"' [options]

Options:
 -f, --file FILE     geolist file to use
'
    udcGEOLISTFPR=("0F16B563D2768EA62B36A13C442C7E45EEF5EAE6")
    udcGEOLISTUDID=("udid2;h;4c5441eb5fbe391b27f6baaa1e8203d1990d98b5;0")
    udcCountries=("FRA")

    for i in ${!udcCountries[@]} ; do 
        CFiles[$i]="$udcHOME/udid2/geolist_${udcCountries[$i]}.txt.asc"
    done

    ## Create file descriptor 11 to save STDOUT
    exec 11>&1
    ## then redirect STDOUT to STDERR to avoid using >&2 for each "echo" ...
    exec 1>&2

    if ! $udc_gpg --list-key "${udcGEOLISTUDID[0]}" 2> /dev/null > /dev/null ; then
        $udc_gpg --recv-keys --batch --no-verbose --keyserver "${KeyServList[0]}" "${udcGEOLISTFPR[0]}"
    fi

    for ((i=0;$#;)) ; do 
        case "$1" in
            -h|--h*) usage ; $udc_exit ;;
            -V|--vers*) echo $udcVersion ; $udc_exit ;;
            -f|--f*)
                shift
                if [ -f "$1" ] \
                        && Country="$($udc_gpg --no-verbose --batch --decrypt "$1" 2> /dev/null | sed -n '2s,e[0-9.+-]\+\t\([A-Z]\{3\}\)\t.*,\1,p' ;)" \
                        && [ "$Country" ] ; then
                        #Note: The validity of the signature will be checked later in the script
                    cCountries[$i]="$Country"
                    cCFiles[$((i++))]="$1"
                    udcCountries="${cCountries[@]}"
                    CFiles="${cCFiles[@]}"
                else
                    echo "Error: incorrect geolist file $1"  ; usage ; $udc_exit 101
                fi ;;
            *) echo "Error: Unrecognized option $1"; usage ; $udc_exit 102 ;;
        esac
        shift
    done

    udc_chooseinlist "Please select your Country of Birth..." "${udcCountries[@]}" "Other..."
    ret=$?
    if ((ret==${#udcCountries[@]}+1)) ; then
        echo -e " Sorry: we can't generate your udid.\n"\
                "Please join the OpenUDC's developpement team to add support for your birthplace <open-udc@googlegroups.com>."
        $udc_exit 104
    else
        GFile="${CFiles[((ret-1))]}"
    fi

    if ! LANGUAGE=en $udc_gpg --verify --no-verbose --batch "$GFile" 2>&1 | grep -o "(${udcGEOLISTUDID[0]}\>.*)" ; then
        #Note: Trust is not checked.

        if [ -z "${cCountries[0]}" ] ; then # No Custom geolist file in command parameter
            if mkdir -p "${GFile%/*}" \
            && udc_GET "https://raw.github.com/jbar/open-udc/master/docs/geolist_${udcCountries[((ret-1))]}.txt.asc" > "$GFile" ; then
                echo " File \"$GFile\" updated from git repository"
            else
                echo " Error: unable to retrieve invalid \"$GFile\" from git repository" ; $udc_exit 105
            fi
        else
            echo "Warning: the geolist file "$GFile" is not signed by a recognized signature" 
            read -p "The geolist file "$GFile" may provide invalid udid2, do you want to continue ? (y/n) " answer
            case "$answer" in
                    Y* | y* | O* | o* )
                    ;; # do nothing
                    *)
                        $udc_exit 106;;
            esac
        fi
    fi

    for ((;;)) ; do 
        for ((j=0;;j++)) ; do 
            read -p "Please enter your place of birth ? " answer
            cities="$($udc_gpg --no-verbose --batch --decrypt "$GFile" 2> /dev/null | sed ' s,\(e[0-9.+-]\+\t\)[A-Z]\{3\}\t,\1,' | grep -i "$answer")"
            eval citiesname=($(echo "$cities" | sed ' s,e[0-9.+-]\+\t\([^"]\+\).*,"\1",'))
            
            udc_chooseinlist "Please validate your place of birth" "${citiesname[@]}" "Other..."
            ret=$?
            if ((ret==${#citiesname[@]}+1)) ; then
                if ((!j)) ; then continue
                else
                    echo -e " Sorry: we can't generate your udid.\n"\
                    "Please join the OpenUDC's developpement team to add support for your birthplace <open-udc@googlegroups.com>."
                    $udc_exit 107
                fi
            else
                bplace="$(echo "$cities" | sed -n "${ret}p" )"
                #echo "$bplace" | sed "s,\(e[0-9.+-]\+\)\t[A-Z]\{3\}\t.*,\1,"
                #echo ${bplace%%$(echo -en "\t")*}
                break;
            fi
        done

        echo -e "\nNote: Only US-ASCII characters are allowed for first name and last name,\n"\
                "other characters (éçñßزд文...) have to be transposed to US-ASCII charset"
        if echo | uni2ascii 2> /dev/null ; then
            Transposer="uni2ascii -B"
        else
            echo -e "\t(and uni2ascii tool is not installed in your PATH)"
            Transposer="cat"
        fi
        
        for ((;;)) ; do 
            read -p "Please enter your birth last name (family name) ? " blname
            blname="$(echo "$blname" | $Transposer 2> /dev/null | tr '[:lower:]' '[:upper:]' )"
            if echo "$blname" | grep "[A-Z]" > /dev/null ; then
                break
            else
                echo -e "\t(Last name MUST contain at least one [A-Z] character)"
            fi
        done

        for ((;;)) ; do 
            read -p "Please enter your birth first first name (forename) ? " bfname
            bfname="$(echo "$bfname" | $Transposer 2> /dev/null )"
            if echo "$bfname" | grep "[A-Za-z-]" > /dev/null ; then
                break
            else
                echo -e "\t(First name MUST contain at least one [A-Z-] character)"
            fi
        done

        for ((;;)) ; do
            read -p "Please enter your date of birth ? (YYYY-mm-dd) " bdate
            date -d "$bdate" > /dev/null && break
        done

        echo -e "\nSummary:\n"\
                "Last name at birth: $blname\n"\
                "First name at birth: $bfname\n"\
                "Birthdate: $(date -d "$bdate" "+%A, %d %B %Y")\n"\
                "Birthplace: ${bplace##*$(echo -en "\t")}\n"
        read -p "Is that correct ? (y/n) " answer
        case "$answer" in 
            Y* | y* | O* | o* )
                break ;;
        esac
    done

    blname="$( echo "$blname" | sed -n ' s,.*\(\<[A-Z]\+\>\)[^A-Z]*,\1,p ' | head -c 20 )"
    bfname="$( echo "$bfname" | sed ' s,[^a-zA-Z-]*\([a-zA-Z-]\+\).*,\U\1, ' | head -c 20 )"

    echo -e "\n\tTa-dah ! ... Your udids are (except of collision) :\n"
    sleep 1
    ## redirect STDOUT to STDOUT, and close fd 11.
    exec >&11
    exec 11>&-

    echo "udid2;c;$blname;$bfname;$bdate;${bplace%%$(echo -en "\t")*};0;"
    echo "udid2;h;$( echo -n "$blname;$bfname;$bdate;${bplace%%$(echo -en "\t")*}" | sha1sum | head -c 40 );0;"
}

################################

function UDcreate {

    helpmsg='
Usage: '"${udc_call:-UDcreate}"' [CREATION_SHEET]
'
    for ((i=0;$#;)) ; do 
        case "$1" in
            -h|--h*) usage ; $udc_exit ;;
            -V|--vers*) echo $udcVersion ; $udc_exit ;;
            -*|--*) echo "Error: Unrecognized option $1"; usage ; $udc_exit 102 ;;
            *) break ;;
        esac
        shift
    done

    if [ -z "$1" ] ; then

        echo "Sorry, works to auto-synchronize creation with publications servers is still in progress..." >&2
        echo "Usage: $0 [CREATION_SHEET]" >&2
        $udc_exit


        if udc_GET "${PubServList[0]}/$Currency/c/cset.status" > "$TmpDir/cset.status" ; then
            if diff "$udcHOME/$Currency/c/cset.status" "$TmpDir/cset.status" ; then
                echo "Nothing to do: You are synchronized with the published  creations !"
                $udc_exit
            else
                # get the missing sheets
                echo
                # ...
            fi
        else
            echo " Error: unable to retrieve creation status from publication server(s)" ; $udc_exit 104
        fi
    fi

    #We have to test that the OpenUDC home contain all the validated cset file (with the network i.e the publication serveur in the first time).
    #if ! preuve qu'on est à jour ; then
    #   rsync ...
    #fi

    if ! head -n 1 "$1" | grep "^udcdata=" > /dev/null || ! eval $(gawk ' /^[[:space:]]*d=idlist\>/ { print "nstart="NR ; exit } {print} ' "$1") ; then
        echo "$udc_call: Error: file \"$1\" is invalid" >&2
        $udc_exit 101
    fi

    if [ "$udcdata" != "cset2.env" ] ; then
        echo "$udc_call: Sorry, unsupported version ($udcdata)" >&2
        $udc_exit 102
    fi

    if [ -z "$curname" ] || [ -z "$setnum" ] || ((${#factors[*]}!=48)) || [ -z "$dlimc" ] ; then
        echo "$udc_call: Error: file \"$1\" is invalid" >&2
        $udc_exit 101
    fi

    for ((i=0;i<48;i++)) ; do
        if ((factors[i])) ; then
            ((value+=$(echo $(((48-i)%3?(48-i)%3:5))*10^$(((47-i)/3)) | bc -l )*factors[i]))
        fi
    done 

    echo -e "\n Set n°$setnum:\n"\
            "\tNumber of Individuals: $idnumber\n"\
            "\tMonetary Dividend: $(echo "scale=2; $value/100" | bc -l ) ${curname}s"

    # Note: validation process is something external to the creation sheet.

    echo -n " Closing date for creation: " 
    if ! date -d "$dlimc" >&2 ; then
        echo -e "$udc_call: Error: file \"$1\" is invalid" >&2
        $udc_exit 101
    fi

    if (($(date +%s)>$(date -d "$dlimc" +%s))) ; then
        echo "\n Sorry, this set of creation has expired\n" >&2
        $udc_exit 102
    fi

    echo

    mkdir -p "$udcHOME/$curname/c"
    head -n $((nstart-1)) "$1" > "$udcHOME/$curname/c/cset-$setnum.env"
    tail -n +$((nstart)) "$1" > "$udcHOME/$curname/c/cset-$setnum.list"

    #myudid="$(([ "$myudid2h" ] && grep -o "$myudid2h" $1 ) || ([ "$myudid2c" ] && grep -o "$myudid2c" $1 ) || ([ "$myudid1" ] && grep -o "$myudid1" $1 ))"
    if [ "$myudid2h" ] && myline="$(grep -n "\<$myudid2h\>" "$udcHOME/$curname/c/cset-$setnum.list" )" ; then
        myudid="$myudid2h"
    elif [ "$myudid2c" ] && myline="$(grep -n "\<$myudid2c\>" "$udcHOME/$curname/c/cset-$setnum.list" )" ; then
        myudid="$myudid2c"
    elif [ "$myudid1" ] && myline="$(grep -n "\<$myudid1\>" "$udcHOME/$curname/c/cset-$setnum.list" )" ; then
        myudid="$myudid1"
    else
        echo -e "\n Sorry, your udid is not in the creation set\n" >&2
        $udc_exit 110
    fi

    myindex=$((${myline%%:*}-2))
    mykey="$(echo "$myline" | cut -d ':' -f 2)"

    echo -e "\n udid=\"$myudid\"\n key=$mykey position=$myindex"

    if ! echo "${mykeys[*]}" | grep "$mykey" > /dev/null ; then
        echo -e "\n Oups ! the keyID associated with your udid ($mykey) is not\n"\
                "one of yours here (${mykeys[*]}).\n"\
                "If there is a mistake in the creation sheet, please alert quickly.\n" >&2
        $udc_exit 105
    fi

    while true ; do
        echo
        read -p "Do you validate this creation set (y/n) ? " rep 
        case "$rep" in
          [yY]*)
            read -t 3 -p "Okay, let's create your part of money !"
            echo -e "\n"

            #KeyID collision in 2 differents creation sheet time are not managed today
            mkdir -p "$udcHOME/$curname/k/$mykey/w/$setnum"
            rm -f "$udcHOME/$curname/k/$mykey/w/$setnum/*"
            cfile="$udcHOME/$curname/k/$mykey/c.$setnum"
            echo -e "d=t2c\nc=$curname\nh=$(sha1sum -t "$1" | cut -d ' ' -f 1)\nb=(" > "$cfile"
            for ((i=0;i<48;i++)) ; do
                if ((factors[i])) ; then
                    value="$(echo $(((48-i)%3?(48-i)%3:5))*10^$(((47-i)/3)) | bc -l )"
                    for ((j=0;j<factors[i];j++)) ; do
                        k=$((factors[i]*myindex+j))
                        echo -n "$value-$setnum-$k.0 "
                        echo "$value-$setnum-$k c.$setnum" >> "$udcHOME/$curname/k/$mykey/w/$setnum/$value"
                    done
                    echo
                fi
            done >> "$cfile"
            echo ")" >> "$cfile"
            #$udc_gpg --detach-sign -u "${mykey}!" --armor --output - "$udcHOME/$curname/cset/cset.$setnum.env" >> "$cfile"
            $udc_gpg --sign -u "${mykey}!" "$cfile"
            # Then we have to publish this creation... and hurry (before dlimc).
            break
            ;;
          [nN]*)
            echo "Okay. If you have not already, please express (to the community) why you disagree."
            break
            ;;
          *)
            echo "  please answer \"yes\" or \"no\""
            ;;
        esac
    done
}

